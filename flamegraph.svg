<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="3822"><g><title>`0x7FF86136C510 (1 samples, 0.03%)</title><rect x="0.0000%" y="517" width="0.0262%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>`0x7FF8612E3B11 (1 samples, 0.03%)</title><rect x="0.0262%" y="437" width="0.0262%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2762%" y="447.50"></text></g><g><title>`0x7FF8612E41B2 (1 samples, 0.03%)</title><rect x="0.0262%" y="421" width="0.0262%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2762%" y="431.50"></text></g><g><title>`0x7FF861388217 (1 samples, 0.03%)</title><rect x="0.0262%" y="405" width="0.0262%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2762%" y="415.50"></text></g><g><title>`0x7FF8613883BD (1 samples, 0.03%)</title><rect x="0.0262%" y="389" width="0.0262%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2762%" y="399.50"></text></g><g><title>`0x7FF861388793 (1 samples, 0.03%)</title><rect x="0.0262%" y="373" width="0.0262%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2762%" y="383.50"></text></g><g><title>`0x7FF861388990 (1 samples, 0.03%)</title><rect x="0.0262%" y="357" width="0.0262%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2762%" y="367.50"></text></g><g><title>`0x7FF861388078 (1 samples, 0.03%)</title><rect x="0.0262%" y="341" width="0.0262%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2762%" y="351.50"></text></g><g><title>`0x7FF861441E34 (1 samples, 0.03%)</title><rect x="0.0262%" y="325" width="0.0262%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2762%" y="335.50"></text></g><g><title>`0x7FF8612E8377 (1 samples, 0.03%)</title><rect x="0.0523%" y="421" width="0.0262%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.3023%" y="431.50"></text></g><g><title>`0x7FF861442254 (1 samples, 0.03%)</title><rect x="0.0523%" y="405" width="0.0262%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.3023%" y="415.50"></text></g><g><title>`0x7FF8613541BA (3 samples, 0.08%)</title><rect x="0.0262%" y="453" width="0.0785%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="3"/><text x="0.2762%" y="463.50"></text></g><g><title>`0x7FF8612E3C3C (2 samples, 0.05%)</title><rect x="0.0523%" y="437" width="0.0523%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="2"/><text x="0.3023%" y="447.50"></text></g><g><title>`0x7FF8612E84E0 (1 samples, 0.03%)</title><rect x="0.0785%" y="421" width="0.0262%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.3285%" y="431.50"></text></g><g><title>`0x7FF861441DD4 (1 samples, 0.03%)</title><rect x="0.0785%" y="405" width="0.0262%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.3285%" y="415.50"></text></g><g><title>`0x7FF8613563C1 (4 samples, 0.10%)</title><rect x="0.0262%" y="485" width="0.1047%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="4"/><text x="0.2762%" y="495.50"></text></g><g><title>`0x7FF861355180 (4 samples, 0.10%)</title><rect x="0.0262%" y="469" width="0.1047%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="4"/><text x="0.2762%" y="479.50"></text></g><g><title>`0x7FF861354281 (1 samples, 0.03%)</title><rect x="0.1047%" y="453" width="0.0262%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.3547%" y="463.50"></text></g><g><title>`0x7FF86131D939 (1 samples, 0.03%)</title><rect x="0.1047%" y="437" width="0.0262%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.3547%" y="447.50"></text></g><g><title>`0x7FF8612E6FAF (1 samples, 0.03%)</title><rect x="0.1308%" y="325" width="0.0262%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.3808%" y="335.50"></text></g><g><title>`0x7FF8612EB250 (1 samples, 0.03%)</title><rect x="0.1308%" y="309" width="0.0262%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="0.3808%" y="319.50"></text></g><g><title>`0x7FF8612EA5A3 (1 samples, 0.03%)</title><rect x="0.1308%" y="293" width="0.0262%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="0.3808%" y="303.50"></text></g><g><title>`0x7FF861442394 (1 samples, 0.03%)</title><rect x="0.1308%" y="277" width="0.0262%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="0.3808%" y="287.50"></text></g><g><title>`0x7FF8612E4E1E (1 samples, 0.03%)</title><rect x="0.1570%" y="293" width="0.0262%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.4070%" y="303.50"></text></g><g><title>`0x7FF8612E53DB (1 samples, 0.03%)</title><rect x="0.1570%" y="277" width="0.0262%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.4070%" y="287.50"></text></g><g><title>`0x7FF8614420F4 (1 samples, 0.03%)</title><rect x="0.1570%" y="261" width="0.0262%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.4070%" y="271.50"></text></g><g><title>`0x7FF8612F63A0 (3 samples, 0.08%)</title><rect x="0.1308%" y="357" width="0.0785%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="3"/><text x="0.3808%" y="367.50"></text></g><g><title>`0x7FF861354294 (3 samples, 0.08%)</title><rect x="0.1308%" y="341" width="0.0785%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="3"/><text x="0.3808%" y="351.50"></text></g><g><title>`0x7FF8612E701D (2 samples, 0.05%)</title><rect x="0.1570%" y="325" width="0.0523%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="2"/><text x="0.4070%" y="335.50"></text></g><g><title>`0x7FF8612E84CC (2 samples, 0.05%)</title><rect x="0.1570%" y="309" width="0.0523%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="2"/><text x="0.4070%" y="319.50"></text></g><g><title>`0x7FF8612E4F98 (1 samples, 0.03%)</title><rect x="0.1832%" y="293" width="0.0262%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="0.4332%" y="303.50"></text></g><g><title>`0x7FF8612F7AC2 (1 samples, 0.03%)</title><rect x="0.1832%" y="277" width="0.0262%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="0.4332%" y="287.50"></text></g><g><title>`0x7FF86131D83D (1 samples, 0.03%)</title><rect x="0.1832%" y="261" width="0.0262%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="0.4332%" y="271.50"></text></g><g><title>`0x7FF85E8A0046 (4 samples, 0.10%)</title><rect x="0.1308%" y="469" width="0.1047%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="4"/><text x="0.3808%" y="479.50"></text></g><g><title>`0x7FF85E88553D (4 samples, 0.10%)</title><rect x="0.1308%" y="453" width="0.1047%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="4"/><text x="0.3808%" y="463.50"></text></g><g><title>`0x7FF85E81423B (4 samples, 0.10%)</title><rect x="0.1308%" y="437" width="0.1047%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="4"/><text x="0.3808%" y="447.50"></text></g><g><title>`0x7FF85E876225 (4 samples, 0.10%)</title><rect x="0.1308%" y="421" width="0.1047%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="4"/><text x="0.3808%" y="431.50"></text></g><g><title>`0x7FF85E987E0F (4 samples, 0.10%)</title><rect x="0.1308%" y="405" width="0.1047%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="4"/><text x="0.3808%" y="415.50"></text></g><g><title>`0x7FF86131FA20 (4 samples, 0.10%)</title><rect x="0.1308%" y="389" width="0.1047%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="4"/><text x="0.3808%" y="399.50"></text></g><g><title>`0x7FF8612F6020 (4 samples, 0.10%)</title><rect x="0.1308%" y="373" width="0.1047%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="4"/><text x="0.3808%" y="383.50"></text></g><g><title>`0x7FF8612F6414 (1 samples, 0.03%)</title><rect x="0.2093%" y="357" width="0.0262%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="0.4593%" y="367.50"></text></g><g><title>`0x7FF861376203 (1 samples, 0.03%)</title><rect x="0.2093%" y="341" width="0.0262%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="0.4593%" y="351.50"></text></g><g><title>`0x7FF861377716 (1 samples, 0.03%)</title><rect x="0.2093%" y="325" width="0.0262%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="0.4593%" y="335.50"></text></g><g><title>`0x7FF8613776EA (1 samples, 0.03%)</title><rect x="0.2093%" y="309" width="0.0262%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="0.4593%" y="319.50"></text></g><g><title>`0x7FF8612E97AC (1 samples, 0.03%)</title><rect x="0.2093%" y="293" width="0.0262%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="0.4593%" y="303.50"></text></g><g><title>`0x7FF8612EBCAE (1 samples, 0.03%)</title><rect x="0.2093%" y="277" width="0.0262%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="0.4593%" y="287.50"></text></g><g><title>`0x7FF86143F89E (1 samples, 0.03%)</title><rect x="0.2093%" y="261" width="0.0262%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="0.4593%" y="271.50"></text></g><g><title>`0x7FF85F9B7A67 (1 samples, 0.03%)</title><rect x="0.2093%" y="245" width="0.0262%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="1"/><text x="0.4593%" y="255.50"></text></g><g><title>`0x7FF85F9B7D7E (1 samples, 0.03%)</title><rect x="0.2093%" y="229" width="0.0262%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="0.4593%" y="239.50"></text></g><g><title>`0x7FF85F9EECCB (1 samples, 0.03%)</title><rect x="0.2093%" y="213" width="0.0262%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="0.4593%" y="223.50"></text></g><g><title>`0x7FF85F9EE652 (1 samples, 0.03%)</title><rect x="0.2093%" y="197" width="0.0262%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="0.4593%" y="207.50"></text></g><g><title>`0x7FF85F9CCC00 (1 samples, 0.03%)</title><rect x="0.2093%" y="181" width="0.0262%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="1"/><text x="0.4593%" y="191.50"></text></g><g><title>`0x7FF85E8A0093 (1 samples, 0.03%)</title><rect x="0.2355%" y="469" width="0.0262%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="0.4855%" y="479.50"></text></g><g><title>`0x7FF8602218AB (1 samples, 0.03%)</title><rect x="0.2355%" y="453" width="0.0262%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="0.4855%" y="463.50"></text></g><g><title>`0x7FF86136C67E (1 samples, 0.03%)</title><rect x="0.2355%" y="437" width="0.0262%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="0.4855%" y="447.50"></text></g><g><title>`0x7FF86136D4AF (1 samples, 0.03%)</title><rect x="0.2355%" y="421" width="0.0262%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="0.4855%" y="431.50"></text></g><g><title>`0x7FF8612EBCAE (1 samples, 0.03%)</title><rect x="0.2355%" y="405" width="0.0262%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="0.4855%" y="415.50"></text></g><g><title>`0x7FF86143F89E (1 samples, 0.03%)</title><rect x="0.2355%" y="389" width="0.0262%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="0.4855%" y="399.50"></text></g><g><title>`0x7FF85F9B7AFD (1 samples, 0.03%)</title><rect x="0.2355%" y="373" width="0.0262%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="1"/><text x="0.4855%" y="383.50"></text></g><g><title>`0x7FF85F9EE2E7 (1 samples, 0.03%)</title><rect x="0.2355%" y="357" width="0.0262%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="1"/><text x="0.4855%" y="367.50"></text></g><g><title>`0x7FF85F9EE6B2 (1 samples, 0.03%)</title><rect x="0.2355%" y="341" width="0.0262%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="1"/><text x="0.4855%" y="351.50"></text></g><g><title>`0x7FF85F9F10B9 (1 samples, 0.03%)</title><rect x="0.2355%" y="325" width="0.0262%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="1"/><text x="0.4855%" y="335.50"></text></g><g><title>`0x7FF85F9FB970 (1 samples, 0.03%)</title><rect x="0.2355%" y="309" width="0.0262%" height="15" fill="rgb(210,229,1)" fg:x="9" fg:w="1"/><text x="0.4855%" y="319.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.03%)</title><rect x="0.2616%" y="293" width="0.0262%" height="15" fill="rgb(222,148,37)" fg:x="10" fg:w="1"/><text x="0.5116%" y="303.50"></text></g><g><title>kaori.exe`kaori::program::compile_source_code (1 samples, 0.03%)</title><rect x="0.2616%" y="277" width="0.0262%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="1"/><text x="0.5116%" y="287.50"></text></g><g><title>kaori.exe`kaori::program::run_syntax_analysis (1 samples, 0.03%)</title><rect x="0.2616%" y="261" width="0.0262%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="1"/><text x="0.5116%" y="271.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;alloc::vec::Vec (1 samples, 0.03%)</title><rect x="0.2616%" y="245" width="0.0262%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="1"/><text x="0.5116%" y="255.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse (1 samples, 0.03%)</title><rect x="0.2616%" y="229" width="0.0262%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="1"/><text x="0.5116%" y="239.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option (1 samples, 0.03%)</title><rect x="0.2616%" y="213" width="0.0262%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="1"/><text x="0.5116%" y="223.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_declaration (1 samples, 0.03%)</title><rect x="0.2616%" y="197" width="0.0262%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="1"/><text x="0.5116%" y="207.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_function_declaration (1 samples, 0.03%)</title><rect x="0.2616%" y="181" width="0.0262%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="1"/><text x="0.5116%" y="191.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;tuple$ (1 samples, 0.03%)</title><rect x="0.2616%" y="165" width="0.0262%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="0.5116%" y="175.50"></text></g><g><title>kaori.exe`kaori::lexer::token_stream::TokenStream::consume (1 samples, 0.03%)</title><rect x="0.2616%" y="149" width="0.0262%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="1"/><text x="0.5116%" y="159.50"></text></g><g><title>kaori.exe`alloc::vec::from_elem (1 samples, 0.03%)</title><rect x="0.2878%" y="277" width="0.0262%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="1"/><text x="0.5378%" y="287.50"></text></g><g><title>kaori.exe`alloc::vec::spec_from_elem::impl$0::from_elem (1 samples, 0.03%)</title><rect x="0.2878%" y="261" width="0.0262%" height="15" fill="rgb(233,84,52)" fg:x="11" fg:w="1"/><text x="0.5378%" y="271.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="0.2878%" y="245" width="0.0262%" height="15" fill="rgb(207,117,47)" fg:x="11" fg:w="1"/><text x="0.5378%" y="255.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="0.2878%" y="229" width="0.0262%" height="15" fill="rgb(249,43,39)" fg:x="11" fg:w="1"/><text x="0.5378%" y="239.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="0.2878%" y="213" width="0.0262%" height="15" fill="rgb(209,38,44)" fg:x="11" fg:w="1"/><text x="0.5378%" y="223.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="0.2878%" y="197" width="0.0262%" height="15" fill="rgb(236,212,23)" fg:x="11" fg:w="1"/><text x="0.5378%" y="207.50"></text></g><g><title>`0x7FF8612FCCA4 (1 samples, 0.03%)</title><rect x="0.2878%" y="181" width="0.0262%" height="15" fill="rgb(242,79,21)" fg:x="11" fg:w="1"/><text x="0.5378%" y="191.50"></text></g><g><title>`0x7FF8612FD0D1 (1 samples, 0.03%)</title><rect x="0.2878%" y="165" width="0.0262%" height="15" fill="rgb(211,96,35)" fg:x="11" fg:w="1"/><text x="0.5378%" y="175.50"></text></g><g><title>`0x7FF861331174 (1 samples, 0.03%)</title><rect x="0.2878%" y="149" width="0.0262%" height="15" fill="rgb(253,215,40)" fg:x="11" fg:w="1"/><text x="0.5378%" y="159.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (67 samples, 1.75%)</title><rect x="9.6546%" y="197" width="1.7530%" height="15" fill="rgb(211,81,21)" fg:x="369" fg:w="67"/><text x="9.9046%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_add(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (681 samples, 17.82%)</title><rect x="0.3140%" y="213" width="17.8179%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="681"/><text x="0.5640%" y="223.50">kaori.exe`kaori::virtual_mac..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::get_value (257 samples, 6.72%)</title><rect x="11.4076%" y="197" width="6.7242%" height="15" fill="rgb(235,213,38)" fg:x="436" fg:w="257"/><text x="11.6576%" y="207.50">kaori.exe..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_jump(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (84 samples, 2.20%)</title><rect x="18.1319%" y="213" width="2.1978%" height="15" fill="rgb(237,122,38)" fg:x="693" fg:w="84"/><text x="18.3819%" y="223.50">k..</text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (8 samples, 0.21%)</title><rect x="20.1204%" y="197" width="0.2093%" height="15" fill="rgb(244,218,35)" fg:x="769" fg:w="8"/><text x="20.3704%" y="207.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (15 samples, 0.39%)</title><rect x="24.4113%" y="197" width="0.3925%" height="15" fill="rgb(240,68,47)" fg:x="933" fg:w="15"/><text x="24.6613%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_jump_if_false(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (245 samples, 6.41%)</title><rect x="20.3297%" y="213" width="6.4103%" height="15" fill="rgb(210,16,53)" fg:x="777" fg:w="245"/><text x="20.5797%" y="223.50">kaori.ex..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::get_value (74 samples, 1.94%)</title><rect x="24.8038%" y="197" width="1.9362%" height="15" fill="rgb(235,124,12)" fg:x="948" fg:w="74"/><text x="25.0538%" y="207.50">k..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_less(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (1,166 samples, 30.51%)</title><rect x="26.7399%" y="213" width="30.5076%" height="15" fill="rgb(224,169,11)" fg:x="1022" fg:w="1166"/><text x="26.9899%" y="223.50">kaori.exe`kaori::virtual_machine::kaori_vm::instr..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::get_value (56 samples, 1.47%)</title><rect x="55.7823%" y="197" width="1.4652%" height="15" fill="rgb(250,166,2)" fg:x="2132" fg:w="56"/><text x="56.0323%" y="207.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (24 samples, 0.63%)</title><rect x="66.1957%" y="197" width="0.6279%" height="15" fill="rgb(242,216,29)" fg:x="2530" fg:w="24"/><text x="66.4457%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::get_value (277 samples, 7.25%)</title><rect x="66.8237%" y="197" width="7.2475%" height="15" fill="rgb(230,116,27)" fg:x="2554" fg:w="277"/><text x="67.0737%" y="207.50">kaori.exe`..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::run_kaori_vm(alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::instruction::Instruction&gt;,alloc::alloc::Global&gt;, alloc::vec::Vec (3,787 samples, 99.08%)</title><rect x="0.2878%" y="293" width="99.0842%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="3787"/><text x="0.5378%" y="303.50">kaori.exe`kaori::virtual_machine::kaori_vm::run_kaori_vm(alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::instruction::Instruction&gt;,alloc::alloc::Global&gt;, alloc::vec::Vec</text></g><g><title>kaori.exe`core::ptr::drop_in_place (3,786 samples, 99.06%)</title><rect x="0.3140%" y="277" width="99.0581%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="3786"/><text x="0.5640%" y="287.50">kaori.exe`core::ptr::drop_in_place</text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec (3,786 samples, 99.06%)</title><rect x="0.3140%" y="261" width="99.0581%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="3786"/><text x="0.5640%" y="271.50">kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec</text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (3,786 samples, 99.06%)</title><rect x="0.3140%" y="245" width="99.0581%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="3786"/><text x="0.5640%" y="255.50">kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec</text></g><g><title>kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (3,786 samples, 99.06%)</title><rect x="0.3140%" y="229" width="99.0581%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="3786"/><text x="0.5640%" y="239.50">kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_move(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (1,610 samples, 42.12%)</title><rect x="57.2475%" y="213" width="42.1245%" height="15" fill="rgb(216,164,2)" fg:x="2188" fg:w="1610"/><text x="57.4975%" y="223.50">kaori.exe`kaori::virtual_machine::kaori_vm::instruction_move(kaori::v..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::set_value (967 samples, 25.30%)</title><rect x="74.0712%" y="197" width="25.3009%" height="15" fill="rgb(220,129,5)" fg:x="2831" fg:w="967"/><text x="74.3212%" y="207.50">kaori.exe`kaori::virtual_machine::kaori_..</text></g><g><title>kaori.exe`kaori::program::run_program (3,790 samples, 99.16%)</title><rect x="0.2616%" y="309" width="99.1627%" height="15" fill="rgb(242,17,10)" fg:x="10" fg:w="3790"/><text x="0.5116%" y="319.50">kaori.exe`kaori::program::run_program</text></g><g><title>kaori.exe`std::io::stdio::_print (2 samples, 0.05%)</title><rect x="99.3721%" y="293" width="0.0523%" height="15" fill="rgb(242,107,0)" fg:x="3798" fg:w="2"/><text x="99.6221%" y="303.50"></text></g><g><title>kaori.exe`std::io::stdio::print_to (2 samples, 0.05%)</title><rect x="99.3721%" y="277" width="0.0523%" height="15" fill="rgb(251,28,31)" fg:x="3798" fg:w="2"/><text x="99.6221%" y="287.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$16::write_fmt (2 samples, 0.05%)</title><rect x="99.3721%" y="261" width="0.0523%" height="15" fill="rgb(233,223,10)" fg:x="3798" fg:w="2"/><text x="99.6221%" y="271.50"></text></g><g><title>kaori.exe`std::io::Write::write_fmt (2 samples, 0.05%)</title><rect x="99.3721%" y="245" width="0.0523%" height="15" fill="rgb(215,21,27)" fg:x="3798" fg:w="2"/><text x="99.6221%" y="255.50"></text></g><g><title>kaori.exe`std::io::default_write_fmt (2 samples, 0.05%)</title><rect x="99.3721%" y="229" width="0.0523%" height="15" fill="rgb(232,23,21)" fg:x="3798" fg:w="2"/><text x="99.6221%" y="239.50"></text></g><g><title>kaori.exe`core::fmt::write (2 samples, 0.05%)</title><rect x="99.3721%" y="213" width="0.0523%" height="15" fill="rgb(244,5,23)" fg:x="3798" fg:w="2"/><text x="99.6221%" y="223.50"></text></g><g><title>kaori.exe`std::io::default_write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.03%)</title><rect x="99.3982%" y="197" width="0.0262%" height="15" fill="rgb(226,81,46)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="207.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$19::write_all (1 samples, 0.03%)</title><rect x="99.3982%" y="181" width="0.0262%" height="15" fill="rgb(247,70,30)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="191.50"></text></g><g><title>kaori.exe`std::sync::reentrant_lock::impl$11::deref (1 samples, 0.03%)</title><rect x="99.3982%" y="165" width="0.0262%" height="15" fill="rgb(212,68,19)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="175.50"></text></g><g><title>kaori.exe`std::io::buffered::linewritershim::impl$1::write_all (1 samples, 0.03%)</title><rect x="99.3982%" y="149" width="0.0262%" height="15" fill="rgb(240,187,13)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="159.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch (1 samples, 0.03%)</title><rect x="99.3982%" y="133" width="0.0262%" height="15" fill="rgb(223,113,26)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="143.50"></text></g><g><title>kaori.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (1 samples, 0.03%)</title><rect x="99.3982%" y="117" width="0.0262%" height="15" fill="rgb(206,192,2)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="127.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$1::write (1 samples, 0.03%)</title><rect x="99.3982%" y="101" width="0.0262%" height="15" fill="rgb(241,108,4)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="111.50"></text></g><g><title>kaori.exe`std::io::stdio::handle_ebadf (1 samples, 0.03%)</title><rect x="99.3982%" y="85" width="0.0262%" height="15" fill="rgb(247,173,49)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="95.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write (1 samples, 0.03%)</title><rect x="99.3982%" y="69" width="0.0262%" height="15" fill="rgb(224,114,35)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="79.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::is_utf8_console (1 samples, 0.03%)</title><rect x="99.3982%" y="53" width="0.0262%" height="15" fill="rgb(245,159,27)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="63.50"></text></g><g><title>`0x7FF85EA0B590 (1 samples, 0.03%)</title><rect x="99.3982%" y="37" width="0.0262%" height="15" fill="rgb(245,172,44)" fg:x="3799" fg:w="1"/><text x="99.6482%" y="47.50"></text></g><g><title>kaori.exe`std::fs::File::open (1 samples, 0.03%)</title><rect x="99.4244%" y="293" width="0.0262%" height="15" fill="rgb(236,23,11)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="303.50"></text></g><g><title>kaori.exe`std::fs::OpenOptions::open (1 samples, 0.03%)</title><rect x="99.4244%" y="277" width="0.0262%" height="15" fill="rgb(205,117,38)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="287.50"></text></g><g><title>kaori.exe`std::fs::OpenOptions::_open (1 samples, 0.03%)</title><rect x="99.4244%" y="261" width="0.0262%" height="15" fill="rgb(237,72,25)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="271.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::open (1 samples, 0.03%)</title><rect x="99.4244%" y="245" width="0.0262%" height="15" fill="rgb(244,70,9)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="255.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place (1 samples, 0.03%)</title><rect x="99.4244%" y="229" width="0.0262%" height="15" fill="rgb(217,125,39)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="239.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place (1 samples, 0.03%)</title><rect x="99.4244%" y="213" width="0.0262%" height="15" fill="rgb(235,36,10)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="223.50"></text></g><g><title>kaori.exe`alloc::raw_vec::impl$3::drop (1 samples, 0.03%)</title><rect x="99.4244%" y="197" width="0.0262%" height="15" fill="rgb(251,123,47)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="207.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner::deallocate (1 samples, 0.03%)</title><rect x="99.4244%" y="181" width="0.0262%" height="15" fill="rgb(221,13,13)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="191.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner::current_memory (1 samples, 0.03%)</title><rect x="99.4244%" y="165" width="0.0262%" height="15" fill="rgb(238,131,9)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="175.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::open_native (1 samples, 0.03%)</title><rect x="99.4244%" y="149" width="0.0262%" height="15" fill="rgb(211,50,8)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="159.50"></text></g><g><title>kaori.exe`std::os::windows::io::handle::impl$13::try_from (1 samples, 0.03%)</title><rect x="99.4244%" y="133" width="0.0262%" height="15" fill="rgb(245,182,24)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="143.50"></text></g><g><title>kaori.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (1 samples, 0.03%)</title><rect x="99.4244%" y="117" width="0.0262%" height="15" fill="rgb(242,14,37)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="127.50"></text></g><g><title>`0x7FF85E98E6A0 (1 samples, 0.03%)</title><rect x="99.4244%" y="101" width="0.0262%" height="15" fill="rgb(246,228,12)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="111.50"></text></g><g><title>`0x7FF85EA1D8EB (1 samples, 0.03%)</title><rect x="99.4244%" y="85" width="0.0262%" height="15" fill="rgb(213,55,15)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="95.50"></text></g><g><title>`0x7FF85EA1D994 (1 samples, 0.03%)</title><rect x="99.4244%" y="69" width="0.0262%" height="15" fill="rgb(209,9,3)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="79.50"></text></g><g><title>`0x7FF85EA1DBB1 (1 samples, 0.03%)</title><rect x="99.4244%" y="53" width="0.0262%" height="15" fill="rgb(230,59,30)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="63.50"></text></g><g><title>`0x7FF85EA1DD6B (1 samples, 0.03%)</title><rect x="99.4244%" y="37" width="0.0262%" height="15" fill="rgb(209,121,21)" fg:x="3800" fg:w="1"/><text x="99.6744%" y="47.50"></text></g><g><title>`0x7FF86136C53C (3,801 samples, 99.45%)</title><rect x="0.0262%" y="517" width="99.4505%" height="15" fill="rgb(220,109,13)" fg:x="1" fg:w="3801"/><text x="0.2762%" y="527.50">`0x7FF86136C53C</text></g><g><title>`0x7FF86020E8D7 (3,801 samples, 99.45%)</title><rect x="0.0262%" y="501" width="99.4505%" height="15" fill="rgb(232,18,1)" fg:x="1" fg:w="3801"/><text x="0.2762%" y="511.50">`0x7FF86020E8D7</text></g><g><title>kaori.exe`__scrt_common_main_seh() (3,797 samples, 99.35%)</title><rect x="0.1308%" y="485" width="99.3459%" height="15" fill="rgb(215,41,42)" fg:x="5" fg:w="3797"/><text x="0.3808%" y="495.50">kaori.exe`__scrt_common_main_seh()</text></g><g><title>kaori.exe`invoke_main() (3,792 samples, 99.22%)</title><rect x="0.2616%" y="469" width="99.2151%" height="15" fill="rgb(224,123,36)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="479.50">kaori.exe`invoke_main()</text></g><g><title>kaori.exe`main (3,792 samples, 99.22%)</title><rect x="0.2616%" y="453" width="99.2151%" height="15" fill="rgb(240,125,3)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="463.50">kaori.exe`main</text></g><g><title>kaori.exe`std::rt::lang_start_internal (3,792 samples, 99.22%)</title><rect x="0.2616%" y="437" width="99.2151%" height="15" fill="rgb(205,98,50)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="447.50">kaori.exe`std::rt::lang_start_internal</text></g><g><title>kaori.exe`std::panic::catch_unwind (3,792 samples, 99.22%)</title><rect x="0.2616%" y="421" width="99.2151%" height="15" fill="rgb(205,185,37)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="431.50">kaori.exe`std::panic::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind (3,792 samples, 99.22%)</title><rect x="0.2616%" y="405" width="99.2151%" height="15" fill="rgb(238,207,15)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="415.50">kaori.exe`std::panicking::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind::do_call (3,792 samples, 99.22%)</title><rect x="0.2616%" y="389" width="99.2151%" height="15" fill="rgb(213,199,42)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="399.50">kaori.exe`std::panicking::catch_unwind::do_call</text></g><g><title>kaori.exe`std::rt::lang_start_internal::closure$0 (3,792 samples, 99.22%)</title><rect x="0.2616%" y="373" width="99.2151%" height="15" fill="rgb(235,201,11)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="383.50">kaori.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (3,792 samples, 99.22%)</title><rect x="0.2616%" y="357" width="99.2151%" height="15" fill="rgb(207,46,11)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="367.50">kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (3,792 samples, 99.22%)</title><rect x="0.2616%" y="341" width="99.2151%" height="15" fill="rgb(241,35,35)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="351.50">kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>kaori.exe`kaori::main (3,792 samples, 99.22%)</title><rect x="0.2616%" y="325" width="99.2151%" height="15" fill="rgb(243,32,47)" fg:x="10" fg:w="3792"/><text x="0.5116%" y="335.50">kaori.exe`kaori::main</text></g><g><title>kaori.exe`std::fs::read_to_string::inner (2 samples, 0.05%)</title><rect x="99.4244%" y="309" width="0.0523%" height="15" fill="rgb(247,202,23)" fg:x="3800" fg:w="2"/><text x="99.6744%" y="319.50"></text></g><g><title>kaori.exe`std::io::default_read_to_string (1 samples, 0.03%)</title><rect x="99.4505%" y="293" width="0.0262%" height="15" fill="rgb(219,102,11)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="303.50"></text></g><g><title>kaori.exe`std::io::append_to_string (1 samples, 0.03%)</title><rect x="99.4505%" y="277" width="0.0262%" height="15" fill="rgb(243,110,44)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="287.50"></text></g><g><title>kaori.exe`std::io::default_read_to_end&lt;std::fs::File&gt; (1 samples, 0.03%)</title><rect x="99.4505%" y="261" width="0.0262%" height="15" fill="rgb(222,74,54)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="271.50"></text></g><g><title>kaori.exe`std::fs::impl$12::read_buf (1 samples, 0.03%)</title><rect x="99.4505%" y="245" width="0.0262%" height="15" fill="rgb(216,99,12)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="255.50"></text></g><g><title>kaori.exe`std::fs::impl$9::read_buf (1 samples, 0.03%)</title><rect x="99.4505%" y="229" width="0.0262%" height="15" fill="rgb(226,22,26)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="239.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::read_buf (1 samples, 0.03%)</title><rect x="99.4505%" y="213" width="0.0262%" height="15" fill="rgb(217,163,10)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="223.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::handle::Handle::read_buf (1 samples, 0.03%)</title><rect x="99.4505%" y="197" width="0.0262%" height="15" fill="rgb(213,25,53)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="207.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::handle::Handle::synchronous_read (1 samples, 0.03%)</title><rect x="99.4505%" y="181" width="0.0262%" height="15" fill="rgb(252,105,26)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="191.50"></text></g><g><title>`0x7FF861441CB4 (1 samples, 0.03%)</title><rect x="99.4505%" y="165" width="0.0262%" height="15" fill="rgb(220,39,43)" fg:x="3801" fg:w="1"/><text x="99.7005%" y="175.50"></text></g><g><title>`0x7FF8613C9100 (1 samples, 0.03%)</title><rect x="99.4767%" y="517" width="0.0262%" height="15" fill="rgb(229,68,48)" fg:x="3802" fg:w="1"/><text x="99.7267%" y="527.50"></text></g><g><title>`0x7FF86139BF21 (1 samples, 0.03%)</title><rect x="99.5029%" y="469" width="0.0262%" height="15" fill="rgb(252,8,32)" fg:x="3803" fg:w="1"/><text x="99.7529%" y="479.50"></text></g><g><title>`0x7FF86138BD65 (1 samples, 0.03%)</title><rect x="99.5029%" y="453" width="0.0262%" height="15" fill="rgb(223,20,43)" fg:x="3803" fg:w="1"/><text x="99.7529%" y="463.50"></text></g><g><title>`0x7FF86138BE44 (1 samples, 0.03%)</title><rect x="99.5029%" y="437" width="0.0262%" height="15" fill="rgb(229,81,49)" fg:x="3803" fg:w="1"/><text x="99.7529%" y="447.50"></text></g><g><title>`0x7FF86138BF9A (1 samples, 0.03%)</title><rect x="99.5029%" y="421" width="0.0262%" height="15" fill="rgb(236,28,36)" fg:x="3803" fg:w="1"/><text x="99.7529%" y="431.50"></text></g><g><title>`0x7FF86139C7A1 (1 samples, 0.03%)</title><rect x="99.5290%" y="469" width="0.0262%" height="15" fill="rgb(249,185,26)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="479.50"></text></g><g><title>`0x7FF8613C972B (1 samples, 0.03%)</title><rect x="99.5290%" y="453" width="0.0262%" height="15" fill="rgb(249,174,33)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="463.50"></text></g><g><title>`0x7FF8613C97D1 (1 samples, 0.03%)</title><rect x="99.5290%" y="437" width="0.0262%" height="15" fill="rgb(233,201,37)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="447.50"></text></g><g><title>`0x7FF8613C98FA (1 samples, 0.03%)</title><rect x="99.5290%" y="421" width="0.0262%" height="15" fill="rgb(221,78,26)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="431.50"></text></g><g><title>`0x7FF8613C9A33 (1 samples, 0.03%)</title><rect x="99.5290%" y="405" width="0.0262%" height="15" fill="rgb(250,127,30)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="415.50"></text></g><g><title>`0x7FF8613C9B12 (1 samples, 0.03%)</title><rect x="99.5290%" y="389" width="0.0262%" height="15" fill="rgb(230,49,44)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="399.50"></text></g><g><title>`0x7FF8613FC859 (1 samples, 0.03%)</title><rect x="99.5290%" y="373" width="0.0262%" height="15" fill="rgb(229,67,23)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="383.50"></text></g><g><title>`0x7FF8613C9CD0 (1 samples, 0.03%)</title><rect x="99.5290%" y="357" width="0.0262%" height="15" fill="rgb(249,83,47)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="367.50"></text></g><g><title>`0x7FF8613C9E32 (1 samples, 0.03%)</title><rect x="99.5290%" y="341" width="0.0262%" height="15" fill="rgb(215,43,3)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="351.50"></text></g><g><title>`0x7FF8614449A4 (1 samples, 0.03%)</title><rect x="99.5290%" y="325" width="0.0262%" height="15" fill="rgb(238,154,13)" fg:x="3804" fg:w="1"/><text x="99.7790%" y="335.50"></text></g><g><title>`0x7FF86139C8E4 (1 samples, 0.03%)</title><rect x="99.5552%" y="469" width="0.0262%" height="15" fill="rgb(219,56,2)" fg:x="3805" fg:w="1"/><text x="99.8052%" y="479.50"></text></g><g><title>`0x7FF8614514F2 (1 samples, 0.03%)</title><rect x="99.5552%" y="453" width="0.0262%" height="15" fill="rgb(233,0,4)" fg:x="3805" fg:w="1"/><text x="99.8052%" y="463.50"></text></g><g><title>`0x7FF86133FB43 (1 samples, 0.03%)</title><rect x="99.5552%" y="437" width="0.0262%" height="15" fill="rgb(235,30,7)" fg:x="3805" fg:w="1"/><text x="99.8052%" y="447.50"></text></g><g><title>`0x7FF86133FCD1 (1 samples, 0.03%)</title><rect x="99.5552%" y="421" width="0.0262%" height="15" fill="rgb(250,79,13)" fg:x="3805" fg:w="1"/><text x="99.8052%" y="431.50"></text></g><g><title>`0x7FF861340B82 (1 samples, 0.03%)</title><rect x="99.5552%" y="405" width="0.0262%" height="15" fill="rgb(211,146,34)" fg:x="3805" fg:w="1"/><text x="99.8052%" y="415.50"></text></g><g><title>`0x7FF8614456A4 (1 samples, 0.03%)</title><rect x="99.5552%" y="389" width="0.0262%" height="15" fill="rgb(228,22,38)" fg:x="3805" fg:w="1"/><text x="99.8052%" y="399.50"></text></g><g><title>`0x7FF86139D1EC (1 samples, 0.03%)</title><rect x="99.5814%" y="469" width="0.0262%" height="15" fill="rgb(235,168,5)" fg:x="3806" fg:w="1"/><text x="99.8314%" y="479.50"></text></g><g><title>`0x7FF8612E5B2D (1 samples, 0.03%)</title><rect x="99.5814%" y="453" width="0.0262%" height="15" fill="rgb(221,155,16)" fg:x="3806" fg:w="1"/><text x="99.8314%" y="463.50"></text></g><g><title>`0x7FF86132CC3B (1 samples, 0.03%)</title><rect x="99.5814%" y="437" width="0.0262%" height="15" fill="rgb(215,215,53)" fg:x="3806" fg:w="1"/><text x="99.8314%" y="447.50"></text></g><g><title>`0x7FF8612E4E1E (1 samples, 0.03%)</title><rect x="99.6075%" y="357" width="0.0262%" height="15" fill="rgb(223,4,10)" fg:x="3807" fg:w="1"/><text x="99.8575%" y="367.50"></text></g><g><title>`0x7FF8612E53DB (1 samples, 0.03%)</title><rect x="99.6075%" y="341" width="0.0262%" height="15" fill="rgb(234,103,6)" fg:x="3807" fg:w="1"/><text x="99.8575%" y="351.50"></text></g><g><title>`0x7FF8614420F4 (1 samples, 0.03%)</title><rect x="99.6075%" y="325" width="0.0262%" height="15" fill="rgb(227,97,0)" fg:x="3807" fg:w="1"/><text x="99.8575%" y="335.50"></text></g><g><title>`0x7FF8612F794E (1 samples, 0.03%)</title><rect x="99.6337%" y="341" width="0.0262%" height="15" fill="rgb(234,150,53)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="351.50"></text></g><g><title>`0x7FF8612F977E (1 samples, 0.03%)</title><rect x="99.6337%" y="325" width="0.0262%" height="15" fill="rgb(228,201,54)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="335.50"></text></g><g><title>`0x7FF8612E49F1 (1 samples, 0.03%)</title><rect x="99.6337%" y="309" width="0.0262%" height="15" fill="rgb(222,22,37)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="319.50"></text></g><g><title>`0x7FF8612E503C (1 samples, 0.03%)</title><rect x="99.6337%" y="293" width="0.0262%" height="15" fill="rgb(237,53,32)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="303.50"></text></g><g><title>`0x7FF8612E5B8B (1 samples, 0.03%)</title><rect x="99.6337%" y="277" width="0.0262%" height="15" fill="rgb(233,25,53)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="287.50"></text></g><g><title>`0x7FF86132B414 (1 samples, 0.03%)</title><rect x="99.6337%" y="261" width="0.0262%" height="15" fill="rgb(210,40,34)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="271.50"></text></g><g><title>`0x7FF86132B2C9 (1 samples, 0.03%)</title><rect x="99.6337%" y="245" width="0.0262%" height="15" fill="rgb(241,220,44)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="255.50"></text></g><g><title>`0x7FF86132B336 (1 samples, 0.03%)</title><rect x="99.6337%" y="229" width="0.0262%" height="15" fill="rgb(235,28,35)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="239.50"></text></g><g><title>`0x7FF8614425F4 (1 samples, 0.03%)</title><rect x="99.6337%" y="213" width="0.0262%" height="15" fill="rgb(210,56,17)" fg:x="3808" fg:w="1"/><text x="99.8837%" y="223.50"></text></g><g><title>`0x7FF8612F6382 (4 samples, 0.10%)</title><rect x="99.6075%" y="405" width="0.1047%" height="15" fill="rgb(224,130,29)" fg:x="3807" fg:w="4"/><text x="99.8575%" y="415.50"></text></g><g><title>`0x7FF8612FAD95 (4 samples, 0.10%)</title><rect x="99.6075%" y="389" width="0.1047%" height="15" fill="rgb(235,212,8)" fg:x="3807" fg:w="4"/><text x="99.8575%" y="399.50"></text></g><g><title>`0x7FF8612E49F1 (4 samples, 0.10%)</title><rect x="99.6075%" y="373" width="0.1047%" height="15" fill="rgb(223,33,50)" fg:x="3807" fg:w="4"/><text x="99.8575%" y="383.50"></text></g><g><title>`0x7FF8612E4F98 (3 samples, 0.08%)</title><rect x="99.6337%" y="357" width="0.0785%" height="15" fill="rgb(219,149,13)" fg:x="3808" fg:w="3"/><text x="99.8837%" y="367.50"></text></g><g><title>`0x7FF8612F7AC2 (2 samples, 0.05%)</title><rect x="99.6599%" y="341" width="0.0523%" height="15" fill="rgb(250,156,29)" fg:x="3809" fg:w="2"/><text x="99.9099%" y="351.50"></text></g><g><title>`0x7FF86131D939 (2 samples, 0.05%)</title><rect x="99.6599%" y="325" width="0.0523%" height="15" fill="rgb(216,193,19)" fg:x="3809" fg:w="2"/><text x="99.9099%" y="335.50"></text></g><g><title>`0x7FF85EA0D0EF (1 samples, 0.03%)</title><rect x="99.7122%" y="293" width="0.0262%" height="15" fill="rgb(216,135,14)" fg:x="3811" fg:w="1"/><text x="99.9622%" y="303.50"></text></g><g><title>`0x7FF85E9DC62C (1 samples, 0.03%)</title><rect x="99.7122%" y="277" width="0.0262%" height="15" fill="rgb(241,47,5)" fg:x="3811" fg:w="1"/><text x="99.9622%" y="287.50"></text></g><g><title>`0x7FF86133FB43 (1 samples, 0.03%)</title><rect x="99.7122%" y="261" width="0.0262%" height="15" fill="rgb(233,42,35)" fg:x="3811" fg:w="1"/><text x="99.9622%" y="271.50"></text></g><g><title>`0x7FF86133FCD1 (1 samples, 0.03%)</title><rect x="99.7122%" y="245" width="0.0262%" height="15" fill="rgb(231,13,6)" fg:x="3811" fg:w="1"/><text x="99.9622%" y="255.50"></text></g><g><title>`0x7FF861340B82 (1 samples, 0.03%)</title><rect x="99.7122%" y="229" width="0.0262%" height="15" fill="rgb(207,181,40)" fg:x="3811" fg:w="1"/><text x="99.9622%" y="239.50"></text></g><g><title>`0x7FF8614456A4 (1 samples, 0.03%)</title><rect x="99.7122%" y="213" width="0.0262%" height="15" fill="rgb(254,173,49)" fg:x="3811" fg:w="1"/><text x="99.9622%" y="223.50"></text></g><g><title>`0x7FF861378B04 (6 samples, 0.16%)</title><rect x="99.6075%" y="453" width="0.1570%" height="15" fill="rgb(221,1,38)" fg:x="3807" fg:w="6"/><text x="99.8575%" y="463.50"></text></g><g><title>`0x7FF86131FA20 (6 samples, 0.16%)</title><rect x="99.6075%" y="437" width="0.1570%" height="15" fill="rgb(206,124,46)" fg:x="3807" fg:w="6"/><text x="99.8575%" y="447.50"></text></g><g><title>`0x7FF8612F6020 (6 samples, 0.16%)</title><rect x="99.6075%" y="421" width="0.1570%" height="15" fill="rgb(249,21,11)" fg:x="3807" fg:w="6"/><text x="99.8575%" y="431.50"></text></g><g><title>`0x7FF8612F6414 (2 samples, 0.05%)</title><rect x="99.7122%" y="405" width="0.0523%" height="15" fill="rgb(222,201,40)" fg:x="3811" fg:w="2"/><text x="99.9622%" y="415.50"></text></g><g><title>`0x7FF861376203 (2 samples, 0.05%)</title><rect x="99.7122%" y="389" width="0.0523%" height="15" fill="rgb(235,61,29)" fg:x="3811" fg:w="2"/><text x="99.9622%" y="399.50"></text></g><g><title>`0x7FF861377716 (2 samples, 0.05%)</title><rect x="99.7122%" y="373" width="0.0523%" height="15" fill="rgb(219,207,3)" fg:x="3811" fg:w="2"/><text x="99.9622%" y="383.50"></text></g><g><title>`0x7FF8613776EA (2 samples, 0.05%)</title><rect x="99.7122%" y="357" width="0.0523%" height="15" fill="rgb(222,56,46)" fg:x="3811" fg:w="2"/><text x="99.9622%" y="367.50"></text></g><g><title>`0x7FF8612E97AC (2 samples, 0.05%)</title><rect x="99.7122%" y="341" width="0.0523%" height="15" fill="rgb(239,76,54)" fg:x="3811" fg:w="2"/><text x="99.9622%" y="351.50"></text></g><g><title>`0x7FF8612EBCAE (2 samples, 0.05%)</title><rect x="99.7122%" y="325" width="0.0523%" height="15" fill="rgb(231,124,27)" fg:x="3811" fg:w="2"/><text x="99.9622%" y="335.50"></text></g><g><title>`0x7FF86143F89E (2 samples, 0.05%)</title><rect x="99.7122%" y="309" width="0.0523%" height="15" fill="rgb(249,195,6)" fg:x="3811" fg:w="2"/><text x="99.9622%" y="319.50"></text></g><g><title>`0x7FF85EA0D0F9 (1 samples, 0.03%)</title><rect x="99.7384%" y="293" width="0.0262%" height="15" fill="rgb(237,174,47)" fg:x="3812" fg:w="1"/><text x="99.9884%" y="303.50"></text></g><g><title>`0x7FF85EA0C8B0 (1 samples, 0.03%)</title><rect x="99.7384%" y="277" width="0.0262%" height="15" fill="rgb(206,201,31)" fg:x="3812" fg:w="1"/><text x="99.9884%" y="287.50"></text></g><g><title>`0x7FF85EA0C9AD (1 samples, 0.03%)</title><rect x="99.7384%" y="261" width="0.0262%" height="15" fill="rgb(231,57,52)" fg:x="3812" fg:w="1"/><text x="99.9884%" y="271.50"></text></g><g><title>`0x7FF85EA6F3B1 (1 samples, 0.03%)</title><rect x="99.7384%" y="245" width="0.0262%" height="15" fill="rgb(248,177,22)" fg:x="3812" fg:w="1"/><text x="99.9884%" y="255.50"></text></g><g><title>`0x7FF85EA76B6B (1 samples, 0.03%)</title><rect x="99.7384%" y="229" width="0.0262%" height="15" fill="rgb(215,211,37)" fg:x="3812" fg:w="1"/><text x="99.9884%" y="239.50"></text></g><g><title>`0x7FF861358A7F (1 samples, 0.03%)</title><rect x="99.7384%" y="213" width="0.0262%" height="15" fill="rgb(241,128,51)" fg:x="3812" fg:w="1"/><text x="99.9884%" y="223.50"></text></g><g><title>`0x7FF861441E34 (1 samples, 0.03%)</title><rect x="99.7384%" y="197" width="0.0262%" height="15" fill="rgb(227,165,31)" fg:x="3812" fg:w="1"/><text x="99.9884%" y="207.50"></text></g><g><title>`0x7FF861378B79 (1 samples, 0.03%)</title><rect x="99.7645%" y="453" width="0.0262%" height="15" fill="rgb(228,167,24)" fg:x="3813" fg:w="1"/><text x="100.0145%" y="463.50"></text></g><g><title>`0x7FF8612E77A0 (1 samples, 0.03%)</title><rect x="99.7645%" y="437" width="0.0262%" height="15" fill="rgb(228,143,12)" fg:x="3813" fg:w="1"/><text x="100.0145%" y="447.50"></text></g><g><title>`0x7FF86132B77B (1 samples, 0.03%)</title><rect x="99.7645%" y="421" width="0.0262%" height="15" fill="rgb(249,149,8)" fg:x="3813" fg:w="1"/><text x="100.0145%" y="431.50"></text></g><g><title>`0x7FF86132B94D (1 samples, 0.03%)</title><rect x="99.7645%" y="405" width="0.0262%" height="15" fill="rgb(243,35,44)" fg:x="3813" fg:w="1"/><text x="100.0145%" y="415.50"></text></g><g><title>`0x7FF86132D95C (1 samples, 0.03%)</title><rect x="99.7645%" y="389" width="0.0262%" height="15" fill="rgb(246,89,9)" fg:x="3813" fg:w="1"/><text x="100.0145%" y="399.50"></text></g><g><title>`0x7FF86139D6A5 (8 samples, 0.21%)</title><rect x="99.6075%" y="469" width="0.2093%" height="15" fill="rgb(233,213,13)" fg:x="3807" fg:w="8"/><text x="99.8575%" y="479.50"></text></g><g><title>`0x7FF861378BA9 (1 samples, 0.03%)</title><rect x="99.7907%" y="453" width="0.0262%" height="15" fill="rgb(233,141,41)" fg:x="3814" fg:w="1"/><text x="100.0407%" y="463.50"></text></g><g><title>`0x7FF86131EDF5 (1 samples, 0.03%)</title><rect x="99.7907%" y="437" width="0.0262%" height="15" fill="rgb(239,167,4)" fg:x="3814" fg:w="1"/><text x="100.0407%" y="447.50"></text></g><g><title>`0x7FF861441E34 (1 samples, 0.03%)</title><rect x="99.7907%" y="421" width="0.0262%" height="15" fill="rgb(209,217,16)" fg:x="3814" fg:w="1"/><text x="100.0407%" y="431.50"></text></g><g><title>`0x7FF8612E4963 (1 samples, 0.03%)</title><rect x="99.8168%" y="421" width="0.0262%" height="15" fill="rgb(219,88,35)" fg:x="3815" fg:w="1"/><text x="100.0668%" y="431.50"></text></g><g><title>`0x7FF8612E4D3B (1 samples, 0.03%)</title><rect x="99.8168%" y="405" width="0.0262%" height="15" fill="rgb(220,193,23)" fg:x="3815" fg:w="1"/><text x="100.0668%" y="415.50"></text></g><g><title>`0x7FF8612ECD56 (1 samples, 0.03%)</title><rect x="99.8168%" y="389" width="0.0262%" height="15" fill="rgb(230,90,52)" fg:x="3815" fg:w="1"/><text x="100.0668%" y="399.50"></text></g><g><title>`0x7FF8612ED1B9 (1 samples, 0.03%)</title><rect x="99.8168%" y="373" width="0.0262%" height="15" fill="rgb(252,106,19)" fg:x="3815" fg:w="1"/><text x="100.0668%" y="383.50"></text></g><g><title>`0x7FF861402DF1 (1 samples, 0.03%)</title><rect x="99.8168%" y="357" width="0.0262%" height="15" fill="rgb(206,74,20)" fg:x="3815" fg:w="1"/><text x="100.0668%" y="367.50"></text></g><g><title>`0x7FF861402E78 (1 samples, 0.03%)</title><rect x="99.8168%" y="341" width="0.0262%" height="15" fill="rgb(230,138,44)" fg:x="3815" fg:w="1"/><text x="100.0668%" y="351.50"></text></g><g><title>`0x7FF861409781 (1 samples, 0.03%)</title><rect x="99.8168%" y="325" width="0.0262%" height="15" fill="rgb(235,182,43)" fg:x="3815" fg:w="1"/><text x="100.0668%" y="335.50"></text></g><g><title>`0x7FF86139D7AF (2 samples, 0.05%)</title><rect x="99.8168%" y="469" width="0.0523%" height="15" fill="rgb(242,16,51)" fg:x="3815" fg:w="2"/><text x="100.0668%" y="479.50"></text></g><g><title>`0x7FF8612F794E (2 samples, 0.05%)</title><rect x="99.8168%" y="453" width="0.0523%" height="15" fill="rgb(248,9,4)" fg:x="3815" fg:w="2"/><text x="100.0668%" y="463.50"></text></g><g><title>`0x7FF8612F977E (2 samples, 0.05%)</title><rect x="99.8168%" y="437" width="0.0523%" height="15" fill="rgb(210,31,22)" fg:x="3815" fg:w="2"/><text x="100.0668%" y="447.50"></text></g><g><title>`0x7FF8612E49F1 (1 samples, 0.03%)</title><rect x="99.8430%" y="421" width="0.0262%" height="15" fill="rgb(239,54,39)" fg:x="3816" fg:w="1"/><text x="100.0930%" y="431.50"></text></g><g><title>`0x7FF8612E4E1E (1 samples, 0.03%)</title><rect x="99.8430%" y="405" width="0.0262%" height="15" fill="rgb(230,99,41)" fg:x="3816" fg:w="1"/><text x="100.0930%" y="415.50"></text></g><g><title>`0x7FF8612E53DB (1 samples, 0.03%)</title><rect x="99.8430%" y="389" width="0.0262%" height="15" fill="rgb(253,106,12)" fg:x="3816" fg:w="1"/><text x="100.0930%" y="399.50"></text></g><g><title>`0x7FF8614420F4 (1 samples, 0.03%)</title><rect x="99.8430%" y="373" width="0.0262%" height="15" fill="rgb(213,46,41)" fg:x="3816" fg:w="1"/><text x="100.0930%" y="383.50"></text></g><g><title>`0x7FF86139D7B7 (1 samples, 0.03%)</title><rect x="99.8692%" y="469" width="0.0262%" height="15" fill="rgb(215,133,35)" fg:x="3817" fg:w="1"/><text x="100.1192%" y="479.50"></text></g><g><title>`0x7FF86136CF87 (1 samples, 0.03%)</title><rect x="99.8692%" y="453" width="0.0262%" height="15" fill="rgb(213,28,5)" fg:x="3817" fg:w="1"/><text x="100.1192%" y="463.50"></text></g><g><title>`0x7FF861354281 (1 samples, 0.03%)</title><rect x="99.8692%" y="437" width="0.0262%" height="15" fill="rgb(215,77,49)" fg:x="3817" fg:w="1"/><text x="100.1192%" y="447.50"></text></g><g><title>`0x7FF86131D8FA (1 samples, 0.03%)</title><rect x="99.8692%" y="421" width="0.0262%" height="15" fill="rgb(248,100,22)" fg:x="3817" fg:w="1"/><text x="100.1192%" y="431.50"></text></g><g><title>`0x7FF8613776EA (1 samples, 0.03%)</title><rect x="99.8953%" y="437" width="0.0262%" height="15" fill="rgb(208,67,9)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="447.50"></text></g><g><title>`0x7FF8612E97AC (1 samples, 0.03%)</title><rect x="99.8953%" y="421" width="0.0262%" height="15" fill="rgb(219,133,21)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="431.50"></text></g><g><title>`0x7FF8612EBCAE (1 samples, 0.03%)</title><rect x="99.8953%" y="405" width="0.0262%" height="15" fill="rgb(246,46,29)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="415.50"></text></g><g><title>`0x7FF86143F89E (1 samples, 0.03%)</title><rect x="99.8953%" y="389" width="0.0262%" height="15" fill="rgb(246,185,52)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="399.50"></text></g><g><title>`0x7FF85E4A07C2 (1 samples, 0.03%)</title><rect x="99.8953%" y="373" width="0.0262%" height="15" fill="rgb(252,136,11)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="383.50"></text></g><g><title>`0x7FF85E4A0B48 (1 samples, 0.03%)</title><rect x="99.8953%" y="357" width="0.0262%" height="15" fill="rgb(219,138,53)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="367.50"></text></g><g><title>`0x7FF85E4B99F7 (1 samples, 0.03%)</title><rect x="99.8953%" y="341" width="0.0262%" height="15" fill="rgb(211,51,23)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="351.50"></text></g><g><title>`0x7FF85E97664B (1 samples, 0.03%)</title><rect x="99.8953%" y="325" width="0.0262%" height="15" fill="rgb(247,221,28)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="335.50"></text></g><g><title>`0x7FF85E9781E0 (1 samples, 0.03%)</title><rect x="99.8953%" y="309" width="0.0262%" height="15" fill="rgb(251,222,45)" fg:x="3818" fg:w="1"/><text x="100.1453%" y="319.50"></text></g><g><title>`0x7FF86139D8C6 (2 samples, 0.05%)</title><rect x="99.8953%" y="469" width="0.0523%" height="15" fill="rgb(217,162,53)" fg:x="3818" fg:w="2"/><text x="100.1453%" y="479.50"></text></g><g><title>`0x7FF861377716 (2 samples, 0.05%)</title><rect x="99.8953%" y="453" width="0.0523%" height="15" fill="rgb(229,93,14)" fg:x="3818" fg:w="2"/><text x="100.1453%" y="463.50"></text></g><g><title>`0x7FF861377716 (1 samples, 0.03%)</title><rect x="99.9215%" y="437" width="0.0262%" height="15" fill="rgb(209,67,49)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="447.50"></text></g><g><title>`0x7FF8613776EA (1 samples, 0.03%)</title><rect x="99.9215%" y="421" width="0.0262%" height="15" fill="rgb(213,87,29)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="431.50"></text></g><g><title>`0x7FF8612E97AC (1 samples, 0.03%)</title><rect x="99.9215%" y="405" width="0.0262%" height="15" fill="rgb(205,151,52)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="415.50"></text></g><g><title>`0x7FF8612EBCAE (1 samples, 0.03%)</title><rect x="99.9215%" y="389" width="0.0262%" height="15" fill="rgb(253,215,39)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="399.50"></text></g><g><title>`0x7FF86143F89E (1 samples, 0.03%)</title><rect x="99.9215%" y="373" width="0.0262%" height="15" fill="rgb(221,220,41)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="383.50"></text></g><g><title>`0x7FF85E816E26 (1 samples, 0.03%)</title><rect x="99.9215%" y="357" width="0.0262%" height="15" fill="rgb(218,133,21)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="367.50"></text></g><g><title>`0x7FF85E87AD56 (1 samples, 0.03%)</title><rect x="99.9215%" y="341" width="0.0262%" height="15" fill="rgb(221,193,43)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="351.50"></text></g><g><title>`0x7FF85E80A776 (1 samples, 0.03%)</title><rect x="99.9215%" y="325" width="0.0262%" height="15" fill="rgb(240,128,52)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="335.50"></text></g><g><title>`0x7FF85E80A906 (1 samples, 0.03%)</title><rect x="99.9215%" y="309" width="0.0262%" height="15" fill="rgb(253,114,12)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="319.50"></text></g><g><title>`0x7FF85E80AE4A (1 samples, 0.03%)</title><rect x="99.9215%" y="293" width="0.0262%" height="15" fill="rgb(215,223,47)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="303.50"></text></g><g><title>`0x7FF85E80AF89 (1 samples, 0.03%)</title><rect x="99.9215%" y="277" width="0.0262%" height="15" fill="rgb(248,225,23)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="287.50"></text></g><g><title>`0x7FF85E80B36B (1 samples, 0.03%)</title><rect x="99.9215%" y="261" width="0.0262%" height="15" fill="rgb(250,108,0)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="271.50"></text></g><g><title>`0x7FF85E984697 (1 samples, 0.03%)</title><rect x="99.9215%" y="245" width="0.0262%" height="15" fill="rgb(228,208,7)" fg:x="3819" fg:w="1"/><text x="100.1715%" y="255.50"></text></g><g><title>`0x7FF86139B83A (18 samples, 0.47%)</title><rect x="99.5029%" y="501" width="0.4710%" height="15" fill="rgb(244,45,10)" fg:x="3803" fg:w="18"/><text x="99.7529%" y="511.50"></text></g><g><title>`0x7FF86139BA50 (18 samples, 0.47%)</title><rect x="99.5029%" y="485" width="0.4710%" height="15" fill="rgb(207,125,25)" fg:x="3803" fg:w="18"/><text x="99.7529%" y="495.50"></text></g><g><title>`0x7FF86139D9A4 (1 samples, 0.03%)</title><rect x="99.9477%" y="469" width="0.0262%" height="15" fill="rgb(210,195,18)" fg:x="3820" fg:w="1"/><text x="100.1977%" y="479.50"></text></g><g><title>`0x7FF8612EBF5E (1 samples, 0.03%)</title><rect x="99.9477%" y="453" width="0.0262%" height="15" fill="rgb(249,80,12)" fg:x="3820" fg:w="1"/><text x="100.1977%" y="463.50"></text></g><g><title>`0x7FF8612EBCAE (1 samples, 0.03%)</title><rect x="99.9477%" y="437" width="0.0262%" height="15" fill="rgb(221,65,9)" fg:x="3820" fg:w="1"/><text x="100.1977%" y="447.50"></text></g><g><title>`0x7FF86143F89E (1 samples, 0.03%)</title><rect x="99.9477%" y="421" width="0.0262%" height="15" fill="rgb(235,49,36)" fg:x="3820" fg:w="1"/><text x="100.1977%" y="431.50"></text></g><g><title>`0x7FF8613C799B (1 samples, 0.03%)</title><rect x="99.9477%" y="405" width="0.0262%" height="15" fill="rgb(225,32,20)" fg:x="3820" fg:w="1"/><text x="100.1977%" y="415.50"></text></g><g><title>kaori.exe`std::sys::thread_local::guard::windows::tls_callback (1 samples, 0.03%)</title><rect x="99.9477%" y="389" width="0.0262%" height="15" fill="rgb(215,141,46)" fg:x="3820" fg:w="1"/><text x="100.1977%" y="399.50"></text></g><g><title>all (3,822 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="3822"/><text x="0.2500%" y="543.50"></text></g><g><title>`0x7FF8613C910E (19 samples, 0.50%)</title><rect x="99.5029%" y="517" width="0.4971%" height="15" fill="rgb(216,222,40)" fg:x="3803" fg:w="19"/><text x="99.7529%" y="527.50"></text></g><g><title>`0x7FF8613C916E (1 samples, 0.03%)</title><rect x="99.9738%" y="501" width="0.0262%" height="15" fill="rgb(234,217,39)" fg:x="3821" fg:w="1"/><text x="100.2238%" y="511.50"></text></g><g><title>`0x7FF8613C9245 (1 samples, 0.03%)</title><rect x="99.9738%" y="485" width="0.0262%" height="15" fill="rgb(207,178,40)" fg:x="3821" fg:w="1"/><text x="100.2238%" y="495.50"></text></g><g><title>`0x7FF8613C92AE (1 samples, 0.03%)</title><rect x="99.9738%" y="469" width="0.0262%" height="15" fill="rgb(221,136,13)" fg:x="3821" fg:w="1"/><text x="100.2238%" y="479.50"></text></g><g><title>`0x7FF8613C9324 (1 samples, 0.03%)</title><rect x="99.9738%" y="453" width="0.0262%" height="15" fill="rgb(249,199,10)" fg:x="3821" fg:w="1"/><text x="100.2238%" y="463.50"></text></g></svg></svg>