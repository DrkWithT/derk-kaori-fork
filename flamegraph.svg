<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="5157"><g><title>`0x7FFC030C2A52 (1 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0194%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>`0x7FFC03192BC1 (1 samples, 0.02%)</title><rect x="0.0194%" y="437" width="0.0194%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2694%" y="447.50"></text></g><g><title>`0x7FFC0316FCD5 (1 samples, 0.02%)</title><rect x="0.0194%" y="421" width="0.0194%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2694%" y="431.50"></text></g><g><title>`0x7FFC0316FD57 (1 samples, 0.02%)</title><rect x="0.0194%" y="405" width="0.0194%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2694%" y="415.50"></text></g><g><title>`0x7FFC03225264 (1 samples, 0.02%)</title><rect x="0.0194%" y="389" width="0.0194%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2694%" y="399.50"></text></g><g><title>`0x7FFC031933DF (1 samples, 0.02%)</title><rect x="0.0388%" y="437" width="0.0194%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.2888%" y="447.50"></text></g><g><title>`0x7FFC030F4F8E (1 samples, 0.02%)</title><rect x="0.0388%" y="421" width="0.0194%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2888%" y="431.50"></text></g><g><title>`0x7FFC030F682A (1 samples, 0.02%)</title><rect x="0.0388%" y="405" width="0.0194%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2888%" y="415.50"></text></g><g><title>`0x7FFC03178DEF (1 samples, 0.02%)</title><rect x="0.0388%" y="389" width="0.0194%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.2888%" y="399.50"></text></g><g><title>`0x7FFC032235F4 (1 samples, 0.02%)</title><rect x="0.0388%" y="373" width="0.0194%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.2888%" y="383.50"></text></g><g><title>`0x7FFC03193578 (1 samples, 0.02%)</title><rect x="0.0582%" y="437" width="0.0194%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="0.3082%" y="447.50"></text></g><g><title>`0x7FFC030C2CD3 (1 samples, 0.02%)</title><rect x="0.0582%" y="421" width="0.0194%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.3082%" y="431.50"></text></g><g><title>`0x7FFC030C48FF (1 samples, 0.02%)</title><rect x="0.0582%" y="405" width="0.0194%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.3082%" y="415.50"></text></g><g><title>`0x7FFC030C53BA (1 samples, 0.02%)</title><rect x="0.0582%" y="389" width="0.0194%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.3082%" y="399.50"></text></g><g><title>`0x7FFC03226BC4 (1 samples, 0.02%)</title><rect x="0.0582%" y="373" width="0.0194%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.3082%" y="383.50"></text></g><g><title>`0x7FFC031935C3 (1 samples, 0.02%)</title><rect x="0.0776%" y="437" width="0.0194%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="0.3276%" y="447.50"></text></g><g><title>`0x7FFC031A5913 (1 samples, 0.02%)</title><rect x="0.0776%" y="421" width="0.0194%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.3276%" y="431.50"></text></g><g><title>`0x7FFC0316BE1E (1 samples, 0.02%)</title><rect x="0.0776%" y="405" width="0.0194%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.3276%" y="415.50"></text></g><g><title>`0x7FFC0316DC34 (1 samples, 0.02%)</title><rect x="0.0776%" y="389" width="0.0194%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.3276%" y="399.50"></text></g><g><title>`0x7FFC0316E882 (1 samples, 0.02%)</title><rect x="0.0776%" y="373" width="0.0194%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.3276%" y="383.50"></text></g><g><title>`0x7FFC0316EAAA (1 samples, 0.02%)</title><rect x="0.0776%" y="357" width="0.0194%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="0.3276%" y="367.50"></text></g><g><title>`0x7FFC03193EBA (1 samples, 0.02%)</title><rect x="0.0970%" y="437" width="0.0194%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="0.3470%" y="447.50"></text></g><g><title>`0x7FFC03161C7F (1 samples, 0.02%)</title><rect x="0.0970%" y="421" width="0.0194%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="0.3470%" y="431.50"></text></g><g><title>`0x7FFC03161AF0 (1 samples, 0.02%)</title><rect x="0.0970%" y="405" width="0.0194%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="0.3470%" y="415.50"></text></g><g><title>`0x7FFC03223894 (1 samples, 0.02%)</title><rect x="0.0970%" y="389" width="0.0194%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="0.3470%" y="399.50"></text></g><g><title>`0x7FFC0310B80E (1 samples, 0.02%)</title><rect x="0.1163%" y="309" width="0.0194%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.3663%" y="319.50"></text></g><g><title>`0x7FFC030E2180 (1 samples, 0.02%)</title><rect x="0.1163%" y="293" width="0.0194%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.3663%" y="303.50"></text></g><g><title>`0x7FFC0310BB0C (1 samples, 0.02%)</title><rect x="0.1357%" y="309" width="0.0194%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="0.3857%" y="319.50"></text></g><g><title>`0x7FFC0310A4F2 (3 samples, 0.06%)</title><rect x="0.1163%" y="373" width="0.0582%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="3"/><text x="0.3663%" y="383.50"></text></g><g><title>`0x7FFC0310EF05 (3 samples, 0.06%)</title><rect x="0.1163%" y="357" width="0.0582%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="3"/><text x="0.3663%" y="367.50"></text></g><g><title>`0x7FFC0312D001 (3 samples, 0.06%)</title><rect x="0.1163%" y="341" width="0.0582%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="3"/><text x="0.3663%" y="351.50"></text></g><g><title>`0x7FFC0312D5A8 (3 samples, 0.06%)</title><rect x="0.1163%" y="325" width="0.0582%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="3"/><text x="0.3663%" y="335.50"></text></g><g><title>`0x7FFC0310BC32 (1 samples, 0.02%)</title><rect x="0.1551%" y="309" width="0.0194%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="0.4051%" y="319.50"></text></g><g><title>`0x7FFC030D2EEE (1 samples, 0.02%)</title><rect x="0.1551%" y="293" width="0.0194%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="0.4051%" y="303.50"></text></g><g><title>`0x7FFC0310A51A (1 samples, 0.02%)</title><rect x="0.1745%" y="373" width="0.0194%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="0.4245%" y="383.50"></text></g><g><title>`0x7FFC0312FC27 (1 samples, 0.02%)</title><rect x="0.1745%" y="357" width="0.0194%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="0.4245%" y="367.50"></text></g><g><title>`0x7FFC0312FDA1 (1 samples, 0.02%)</title><rect x="0.1745%" y="341" width="0.0194%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="1"/><text x="0.4245%" y="351.50"></text></g><g><title>`0x7FFC030D36D6 (1 samples, 0.02%)</title><rect x="0.1745%" y="325" width="0.0194%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="0.4245%" y="335.50"></text></g><g><title>`0x7FFC030E0E23 (1 samples, 0.02%)</title><rect x="0.1745%" y="309" width="0.0194%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="0.4245%" y="319.50"></text></g><g><title>`0x7FFC030E1C53 (1 samples, 0.02%)</title><rect x="0.1745%" y="293" width="0.0194%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="0.4245%" y="303.50"></text></g><g><title>`0x7FFC0322898F (1 samples, 0.02%)</title><rect x="0.1745%" y="277" width="0.0194%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="0.4245%" y="287.50"></text></g><g><title>`0x7FFC030C86FA (1 samples, 0.02%)</title><rect x="0.1939%" y="341" width="0.0194%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="0.4439%" y="351.50"></text></g><g><title>`0x7FFC031337AC (1 samples, 0.02%)</title><rect x="0.1939%" y="325" width="0.0194%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="0.4439%" y="335.50"></text></g><g><title>`0x7FFC0313483E (1 samples, 0.02%)</title><rect x="0.1939%" y="309" width="0.0194%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="0.4439%" y="319.50"></text></g><g><title>`0x7FFC03220EDE (1 samples, 0.02%)</title><rect x="0.1939%" y="293" width="0.0194%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="0.4439%" y="303.50"></text></g><g><title>`0x7FFC022EE142 (1 samples, 0.02%)</title><rect x="0.1939%" y="277" width="0.0194%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="0.4439%" y="287.50"></text></g><g><title>`0x7FFC022EE227 (1 samples, 0.02%)</title><rect x="0.1939%" y="261" width="0.0194%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="0.4439%" y="271.50"></text></g><g><title>`0x7FFC022EE538 (1 samples, 0.02%)</title><rect x="0.1939%" y="245" width="0.0194%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="0.4439%" y="255.50"></text></g><g><title>`0x7FFC00AB3FFD (1 samples, 0.02%)</title><rect x="0.2133%" y="261" width="0.0194%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="1"/><text x="0.4633%" y="271.50"></text></g><g><title>`0x7FFC009E4A63 (1 samples, 0.02%)</title><rect x="0.2133%" y="245" width="0.0194%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="0.4633%" y="255.50"></text></g><g><title>`0x7FFC009E3678 (1 samples, 0.02%)</title><rect x="0.2133%" y="229" width="0.0194%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="0.4633%" y="239.50"></text></g><g><title>`0x7FFC009E3540 (1 samples, 0.02%)</title><rect x="0.2133%" y="213" width="0.0194%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="0.4633%" y="223.50"></text></g><g><title>`0x7FFC009E2EAE (1 samples, 0.02%)</title><rect x="0.2133%" y="197" width="0.0194%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="0.4633%" y="207.50"></text></g><g><title>`0x7FFC009ED620 (1 samples, 0.02%)</title><rect x="0.2133%" y="181" width="0.0194%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="0.4633%" y="191.50"></text></g><g><title>`0x7FFC00A5E6B0 (1 samples, 0.02%)</title><rect x="0.2327%" y="245" width="0.0194%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="0.4827%" y="255.50"></text></g><g><title>`0x7FFC03105613 (1 samples, 0.02%)</title><rect x="0.2327%" y="229" width="0.0194%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="0.4827%" y="239.50"></text></g><g><title>`0x7FFC031057A1 (1 samples, 0.02%)</title><rect x="0.2327%" y="213" width="0.0194%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="1"/><text x="0.4827%" y="223.50"></text></g><g><title>`0x7FFC031054B2 (1 samples, 0.02%)</title><rect x="0.2327%" y="197" width="0.0194%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="1"/><text x="0.4827%" y="207.50"></text></g><g><title>`0x7FFC03104CA3 (1 samples, 0.02%)</title><rect x="0.2327%" y="181" width="0.0194%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="1"/><text x="0.4827%" y="191.50"></text></g><g><title>`0x7FFC0310504A (1 samples, 0.02%)</title><rect x="0.2327%" y="165" width="0.0194%" height="15" fill="rgb(227,1,9)" fg:x="12" fg:w="1"/><text x="0.4827%" y="175.50"></text></g><g><title>`0x7FFC00AC7750 (1 samples, 0.02%)</title><rect x="0.2327%" y="149" width="0.0194%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="1"/><text x="0.4827%" y="159.50"></text></g><g><title>`0x7FFC0318B934 (8 samples, 0.16%)</title><rect x="0.1163%" y="421" width="0.1551%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="8"/><text x="0.3663%" y="431.50"></text></g><g><title>`0x7FFC030D4FB0 (8 samples, 0.16%)</title><rect x="0.1163%" y="405" width="0.1551%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="8"/><text x="0.3663%" y="415.50"></text></g><g><title>`0x7FFC0310A190 (8 samples, 0.16%)</title><rect x="0.1163%" y="389" width="0.1551%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="8"/><text x="0.3663%" y="399.50"></text></g><g><title>`0x7FFC0310A584 (4 samples, 0.08%)</title><rect x="0.1939%" y="373" width="0.0776%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="4"/><text x="0.4439%" y="383.50"></text></g><g><title>`0x7FFC030C7883 (4 samples, 0.08%)</title><rect x="0.1939%" y="357" width="0.0776%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="4"/><text x="0.4439%" y="367.50"></text></g><g><title>`0x7FFC030C8726 (3 samples, 0.06%)</title><rect x="0.2133%" y="341" width="0.0582%" height="15" fill="rgb(247,138,52)" fg:x="11" fg:w="3"/><text x="0.4633%" y="351.50"></text></g><g><title>`0x7FFC030C86FA (3 samples, 0.06%)</title><rect x="0.2133%" y="325" width="0.0582%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="3"/><text x="0.4633%" y="335.50"></text></g><g><title>`0x7FFC031337AC (3 samples, 0.06%)</title><rect x="0.2133%" y="309" width="0.0582%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="3"/><text x="0.4633%" y="319.50"></text></g><g><title>`0x7FFC0313483E (3 samples, 0.06%)</title><rect x="0.2133%" y="293" width="0.0582%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="3"/><text x="0.4633%" y="303.50"></text></g><g><title>`0x7FFC03220EDE (3 samples, 0.06%)</title><rect x="0.2133%" y="277" width="0.0582%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="3"/><text x="0.4633%" y="287.50"></text></g><g><title>`0x7FFC00AB40AF (2 samples, 0.04%)</title><rect x="0.2327%" y="261" width="0.0388%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="2"/><text x="0.4827%" y="271.50"></text></g><g><title>`0x7FFC00A5E87D (1 samples, 0.02%)</title><rect x="0.2521%" y="245" width="0.0194%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="1"/><text x="0.5021%" y="255.50"></text></g><g><title>`0x7FFC00A5F060 (1 samples, 0.02%)</title><rect x="0.2521%" y="229" width="0.0194%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="1"/><text x="0.5021%" y="239.50"></text></g><g><title>`0x7FFC03105613 (1 samples, 0.02%)</title><rect x="0.2521%" y="213" width="0.0194%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="0.5021%" y="223.50"></text></g><g><title>`0x7FFC031057A1 (1 samples, 0.02%)</title><rect x="0.2521%" y="197" width="0.0194%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="0.5021%" y="207.50"></text></g><g><title>`0x7FFC03105482 (1 samples, 0.02%)</title><rect x="0.2521%" y="181" width="0.0194%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="0.5021%" y="191.50"></text></g><g><title>`0x7FFC03226CE4 (1 samples, 0.02%)</title><rect x="0.2521%" y="165" width="0.0194%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="1"/><text x="0.5021%" y="175.50"></text></g><g><title>`0x7FFC0318B9A9 (1 samples, 0.02%)</title><rect x="0.2715%" y="421" width="0.0194%" height="15" fill="rgb(236,212,23)" fg:x="14" fg:w="1"/><text x="0.5215%" y="431.50"></text></g><g><title>`0x7FFC031317A0 (1 samples, 0.02%)</title><rect x="0.2715%" y="405" width="0.0194%" height="15" fill="rgb(242,79,21)" fg:x="14" fg:w="1"/><text x="0.5215%" y="415.50"></text></g><g><title>`0x7FFC030E0FBB (1 samples, 0.02%)</title><rect x="0.2715%" y="389" width="0.0194%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="1"/><text x="0.5215%" y="399.50"></text></g><g><title>`0x7FFC030E118D (1 samples, 0.02%)</title><rect x="0.2715%" y="373" width="0.0194%" height="15" fill="rgb(253,215,40)" fg:x="14" fg:w="1"/><text x="0.5215%" y="383.50"></text></g><g><title>`0x7FFC030E30F1 (1 samples, 0.02%)</title><rect x="0.2715%" y="357" width="0.0194%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="1"/><text x="0.5215%" y="367.50"></text></g><g><title>`0x7FFC03194345 (10 samples, 0.19%)</title><rect x="0.1163%" y="437" width="0.1939%" height="15" fill="rgb(208,190,38)" fg:x="6" fg:w="10"/><text x="0.3663%" y="447.50"></text></g><g><title>`0x7FFC0318BA23 (1 samples, 0.02%)</title><rect x="0.2909%" y="421" width="0.0194%" height="15" fill="rgb(235,213,38)" fg:x="15" fg:w="1"/><text x="0.5409%" y="431.50"></text></g><g><title>`0x7FFC00ACBFCD (1 samples, 0.02%)</title><rect x="0.2909%" y="405" width="0.0194%" height="15" fill="rgb(237,122,38)" fg:x="15" fg:w="1"/><text x="0.5409%" y="415.50"></text></g><g><title>`0x7FFC00ACC0B8 (1 samples, 0.02%)</title><rect x="0.2909%" y="389" width="0.0194%" height="15" fill="rgb(244,218,35)" fg:x="15" fg:w="1"/><text x="0.5409%" y="399.50"></text></g><g><title>`0x7FFC03223514 (1 samples, 0.02%)</title><rect x="0.2909%" y="373" width="0.0194%" height="15" fill="rgb(240,68,47)" fg:x="15" fg:w="1"/><text x="0.5409%" y="383.50"></text></g><g><title>`0x7FFC0319444F (2 samples, 0.04%)</title><rect x="0.3103%" y="437" width="0.0388%" height="15" fill="rgb(210,16,53)" fg:x="16" fg:w="2"/><text x="0.5603%" y="447.50"></text></g><g><title>`0x7FFC0310BABE (2 samples, 0.04%)</title><rect x="0.3103%" y="421" width="0.0388%" height="15" fill="rgb(235,124,12)" fg:x="16" fg:w="2"/><text x="0.5603%" y="431.50"></text></g><g><title>`0x7FFC0310D8EE (2 samples, 0.04%)</title><rect x="0.3103%" y="405" width="0.0388%" height="15" fill="rgb(224,169,11)" fg:x="16" fg:w="2"/><text x="0.5603%" y="415.50"></text></g><g><title>`0x7FFC0312D001 (2 samples, 0.04%)</title><rect x="0.3103%" y="389" width="0.0388%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="2"/><text x="0.5603%" y="399.50"></text></g><g><title>`0x7FFC0312D42E (2 samples, 0.04%)</title><rect x="0.3103%" y="373" width="0.0388%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="2"/><text x="0.5603%" y="383.50"></text></g><g><title>`0x7FFC0312D9EB (2 samples, 0.04%)</title><rect x="0.3103%" y="357" width="0.0388%" height="15" fill="rgb(230,116,27)" fg:x="16" fg:w="2"/><text x="0.5603%" y="367.50"></text></g><g><title>`0x7FFC03223734 (2 samples, 0.04%)</title><rect x="0.3103%" y="341" width="0.0388%" height="15" fill="rgb(228,99,48)" fg:x="16" fg:w="2"/><text x="0.5603%" y="351.50"></text></g><g><title>`0x7FFC03194457 (1 samples, 0.02%)</title><rect x="0.3490%" y="437" width="0.0194%" height="15" fill="rgb(253,11,6)" fg:x="18" fg:w="1"/><text x="0.5990%" y="447.50"></text></g><g><title>`0x7FFC0312FC27 (1 samples, 0.02%)</title><rect x="0.3490%" y="421" width="0.0194%" height="15" fill="rgb(247,143,39)" fg:x="18" fg:w="1"/><text x="0.5990%" y="431.50"></text></g><g><title>`0x7FFC0312FDA1 (1 samples, 0.02%)</title><rect x="0.3490%" y="405" width="0.0194%" height="15" fill="rgb(236,97,10)" fg:x="18" fg:w="1"/><text x="0.5990%" y="415.50"></text></g><g><title>`0x7FFC030D2F14 (1 samples, 0.02%)</title><rect x="0.3490%" y="389" width="0.0194%" height="15" fill="rgb(233,208,19)" fg:x="18" fg:w="1"/><text x="0.5990%" y="399.50"></text></g><g><title>`0x7FFC030C86FA (1 samples, 0.02%)</title><rect x="0.3684%" y="405" width="0.0194%" height="15" fill="rgb(216,164,2)" fg:x="19" fg:w="1"/><text x="0.6184%" y="415.50"></text></g><g><title>`0x7FFC031337AC (1 samples, 0.02%)</title><rect x="0.3684%" y="389" width="0.0194%" height="15" fill="rgb(220,129,5)" fg:x="19" fg:w="1"/><text x="0.6184%" y="399.50"></text></g><g><title>`0x7FFC0313483E (1 samples, 0.02%)</title><rect x="0.3684%" y="373" width="0.0194%" height="15" fill="rgb(242,17,10)" fg:x="19" fg:w="1"/><text x="0.6184%" y="383.50"></text></g><g><title>`0x7FFC03220EDE (1 samples, 0.02%)</title><rect x="0.3684%" y="357" width="0.0194%" height="15" fill="rgb(242,107,0)" fg:x="19" fg:w="1"/><text x="0.6184%" y="367.50"></text></g><g><title>`0x7FFC003103B2 (1 samples, 0.02%)</title><rect x="0.3684%" y="341" width="0.0194%" height="15" fill="rgb(251,28,31)" fg:x="19" fg:w="1"/><text x="0.6184%" y="351.50"></text></g><g><title>`0x7FFC0031070F (1 samples, 0.02%)</title><rect x="0.3684%" y="325" width="0.0194%" height="15" fill="rgb(233,223,10)" fg:x="19" fg:w="1"/><text x="0.6184%" y="335.50"></text></g><g><title>`0x7FFC003129A2 (1 samples, 0.02%)</title><rect x="0.3684%" y="309" width="0.0194%" height="15" fill="rgb(215,21,27)" fg:x="19" fg:w="1"/><text x="0.6184%" y="319.50"></text></g><g><title>`0x7FFC003138FE (1 samples, 0.02%)</title><rect x="0.3684%" y="293" width="0.0194%" height="15" fill="rgb(232,23,21)" fg:x="19" fg:w="1"/><text x="0.6184%" y="303.50"></text></g><g><title>`0x7FFC00313F08 (1 samples, 0.02%)</title><rect x="0.3684%" y="277" width="0.0194%" height="15" fill="rgb(244,5,23)" fg:x="19" fg:w="1"/><text x="0.6184%" y="287.50"></text></g><g><title>`0x7FFC00315AF6 (1 samples, 0.02%)</title><rect x="0.3684%" y="261" width="0.0194%" height="15" fill="rgb(226,81,46)" fg:x="19" fg:w="1"/><text x="0.6184%" y="271.50"></text></g><g><title>`0x7FFC00866E0D (1 samples, 0.02%)</title><rect x="0.3878%" y="325" width="0.0194%" height="15" fill="rgb(247,70,30)" fg:x="20" fg:w="1"/><text x="0.6378%" y="335.50"></text></g><g><title>`0x7FFC00902986 (1 samples, 0.02%)</title><rect x="0.3878%" y="309" width="0.0194%" height="15" fill="rgb(212,68,19)" fg:x="20" fg:w="1"/><text x="0.6378%" y="319.50"></text></g><g><title>`0x7FFC00902FBC (1 samples, 0.02%)</title><rect x="0.3878%" y="293" width="0.0194%" height="15" fill="rgb(240,187,13)" fg:x="20" fg:w="1"/><text x="0.6378%" y="303.50"></text></g><g><title>`0x7FFC00903332 (1 samples, 0.02%)</title><rect x="0.3878%" y="277" width="0.0194%" height="15" fill="rgb(223,113,26)" fg:x="20" fg:w="1"/><text x="0.6378%" y="287.50"></text></g><g><title>`0x7FFC009031A5 (1 samples, 0.02%)</title><rect x="0.3878%" y="261" width="0.0194%" height="15" fill="rgb(206,192,2)" fg:x="20" fg:w="1"/><text x="0.6378%" y="271.50"></text></g><g><title>`0x7FFC00A007F2 (1 samples, 0.02%)</title><rect x="0.3878%" y="245" width="0.0194%" height="15" fill="rgb(241,108,4)" fg:x="20" fg:w="1"/><text x="0.6378%" y="255.50"></text></g><g><title>`0x7FFC030C7FC7 (1 samples, 0.02%)</title><rect x="0.3878%" y="229" width="0.0194%" height="15" fill="rgb(247,173,49)" fg:x="20" fg:w="1"/><text x="0.6378%" y="239.50"></text></g><g><title>`0x7FFC030D3D46 (1 samples, 0.02%)</title><rect x="0.3878%" y="213" width="0.0194%" height="15" fill="rgb(224,114,35)" fg:x="20" fg:w="1"/><text x="0.6378%" y="223.50"></text></g><g><title>`0x7FFC03194566 (3 samples, 0.06%)</title><rect x="0.3684%" y="437" width="0.0582%" height="15" fill="rgb(245,159,27)" fg:x="19" fg:w="3"/><text x="0.6184%" y="447.50"></text></g><g><title>`0x7FFC030C8726 (3 samples, 0.06%)</title><rect x="0.3684%" y="421" width="0.0582%" height="15" fill="rgb(245,172,44)" fg:x="19" fg:w="3"/><text x="0.6184%" y="431.50"></text></g><g><title>`0x7FFC030C8726 (2 samples, 0.04%)</title><rect x="0.3878%" y="405" width="0.0388%" height="15" fill="rgb(236,23,11)" fg:x="20" fg:w="2"/><text x="0.6378%" y="415.50"></text></g><g><title>`0x7FFC030C86FA (2 samples, 0.04%)</title><rect x="0.3878%" y="389" width="0.0388%" height="15" fill="rgb(205,117,38)" fg:x="20" fg:w="2"/><text x="0.6378%" y="399.50"></text></g><g><title>`0x7FFC031337AC (2 samples, 0.04%)</title><rect x="0.3878%" y="373" width="0.0388%" height="15" fill="rgb(237,72,25)" fg:x="20" fg:w="2"/><text x="0.6378%" y="383.50"></text></g><g><title>`0x7FFC0313483E (2 samples, 0.04%)</title><rect x="0.3878%" y="357" width="0.0388%" height="15" fill="rgb(244,70,9)" fg:x="20" fg:w="2"/><text x="0.6378%" y="367.50"></text></g><g><title>`0x7FFC03220EDE (2 samples, 0.04%)</title><rect x="0.3878%" y="341" width="0.0388%" height="15" fill="rgb(217,125,39)" fg:x="20" fg:w="2"/><text x="0.6378%" y="351.50"></text></g><g><title>`0x7FFC00866E26 (1 samples, 0.02%)</title><rect x="0.4072%" y="325" width="0.0194%" height="15" fill="rgb(235,36,10)" fg:x="21" fg:w="1"/><text x="0.6572%" y="335.50"></text></g><g><title>`0x7FFC008CAD56 (1 samples, 0.02%)</title><rect x="0.4072%" y="309" width="0.0194%" height="15" fill="rgb(251,123,47)" fg:x="21" fg:w="1"/><text x="0.6572%" y="319.50"></text></g><g><title>`0x7FFC0085A776 (1 samples, 0.02%)</title><rect x="0.4072%" y="293" width="0.0194%" height="15" fill="rgb(221,13,13)" fg:x="21" fg:w="1"/><text x="0.6572%" y="303.50"></text></g><g><title>`0x7FFC0085A906 (1 samples, 0.02%)</title><rect x="0.4072%" y="277" width="0.0194%" height="15" fill="rgb(238,131,9)" fg:x="21" fg:w="1"/><text x="0.6572%" y="287.50"></text></g><g><title>`0x7FFC0085AE4A (1 samples, 0.02%)</title><rect x="0.4072%" y="261" width="0.0194%" height="15" fill="rgb(211,50,8)" fg:x="21" fg:w="1"/><text x="0.6572%" y="271.50"></text></g><g><title>`0x7FFC0085AF89 (1 samples, 0.02%)</title><rect x="0.4072%" y="245" width="0.0194%" height="15" fill="rgb(245,182,24)" fg:x="21" fg:w="1"/><text x="0.6572%" y="255.50"></text></g><g><title>`0x7FFC0085B2CF (1 samples, 0.02%)</title><rect x="0.4072%" y="229" width="0.0194%" height="15" fill="rgb(242,14,37)" fg:x="21" fg:w="1"/><text x="0.6572%" y="239.50"></text></g><g><title>`0x7FFC009EB8B9 (1 samples, 0.02%)</title><rect x="0.4072%" y="213" width="0.0194%" height="15" fill="rgb(246,228,12)" fg:x="21" fg:w="1"/><text x="0.6572%" y="223.50"></text></g><g><title>`0x7FFC030C2A2E (23 samples, 0.45%)</title><rect x="0.0000%" y="485" width="0.4460%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="23"/><text x="0.2500%" y="495.50"></text></g><g><title>`0x7FFC031924DA (22 samples, 0.43%)</title><rect x="0.0194%" y="469" width="0.4266%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="22"/><text x="0.2694%" y="479.50"></text></g><g><title>`0x7FFC031926F0 (22 samples, 0.43%)</title><rect x="0.0194%" y="453" width="0.4266%" height="15" fill="rgb(230,59,30)" fg:x="1" fg:w="22"/><text x="0.2694%" y="463.50"></text></g><g><title>`0x7FFC031945D5 (1 samples, 0.02%)</title><rect x="0.4266%" y="437" width="0.0194%" height="15" fill="rgb(209,121,21)" fg:x="22" fg:w="1"/><text x="0.6766%" y="447.50"></text></g><g><title>`0x7FFC031B8D28 (1 samples, 0.02%)</title><rect x="0.4266%" y="421" width="0.0194%" height="15" fill="rgb(220,109,13)" fg:x="22" fg:w="1"/><text x="0.6766%" y="431.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.4266%" y="405" width="0.0194%" height="15" fill="rgb(232,18,1)" fg:x="22" fg:w="1"/><text x="0.6766%" y="415.50"></text></g><g><title>`0x7FFC030C8D70 (1 samples, 0.02%)</title><rect x="0.4460%" y="485" width="0.0194%" height="15" fill="rgb(215,41,42)" fg:x="23" fg:w="1"/><text x="0.6960%" y="495.50"></text></g><g><title>`0x7FFC0312FF81 (1 samples, 0.02%)</title><rect x="0.4654%" y="405" width="0.0194%" height="15" fill="rgb(224,123,36)" fg:x="24" fg:w="1"/><text x="0.7154%" y="415.50"></text></g><g><title>`0x7FFC03130782 (1 samples, 0.02%)</title><rect x="0.4654%" y="389" width="0.0194%" height="15" fill="rgb(240,125,3)" fg:x="24" fg:w="1"/><text x="0.7154%" y="399.50"></text></g><g><title>`0x7FFC0316C187 (1 samples, 0.02%)</title><rect x="0.4654%" y="373" width="0.0194%" height="15" fill="rgb(205,98,50)" fg:x="24" fg:w="1"/><text x="0.7154%" y="383.50"></text></g><g><title>`0x7FFC0316C32D (1 samples, 0.02%)</title><rect x="0.4654%" y="357" width="0.0194%" height="15" fill="rgb(205,185,37)" fg:x="24" fg:w="1"/><text x="0.7154%" y="367.50"></text></g><g><title>`0x7FFC0316C703 (1 samples, 0.02%)</title><rect x="0.4654%" y="341" width="0.0194%" height="15" fill="rgb(238,207,15)" fg:x="24" fg:w="1"/><text x="0.7154%" y="351.50"></text></g><g><title>`0x7FFC0316C900 (1 samples, 0.02%)</title><rect x="0.4654%" y="325" width="0.0194%" height="15" fill="rgb(213,199,42)" fg:x="24" fg:w="1"/><text x="0.7154%" y="335.50"></text></g><g><title>`0x7FFC0316BFE8 (1 samples, 0.02%)</title><rect x="0.4654%" y="309" width="0.0194%" height="15" fill="rgb(235,201,11)" fg:x="24" fg:w="1"/><text x="0.7154%" y="319.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.4654%" y="293" width="0.0194%" height="15" fill="rgb(207,46,11)" fg:x="24" fg:w="1"/><text x="0.7154%" y="303.50"></text></g><g><title>`0x7FFC03132377 (1 samples, 0.02%)</title><rect x="0.4848%" y="389" width="0.0194%" height="15" fill="rgb(241,35,35)" fg:x="25" fg:w="1"/><text x="0.7348%" y="399.50"></text></g><g><title>`0x7FFC03223894 (1 samples, 0.02%)</title><rect x="0.4848%" y="373" width="0.0194%" height="15" fill="rgb(243,32,47)" fg:x="25" fg:w="1"/><text x="0.7348%" y="383.50"></text></g><g><title>`0x7FFC0312FCDA (3 samples, 0.06%)</title><rect x="0.4654%" y="421" width="0.0582%" height="15" fill="rgb(247,202,23)" fg:x="24" fg:w="3"/><text x="0.7154%" y="431.50"></text></g><g><title>`0x7FFC031300AC (2 samples, 0.04%)</title><rect x="0.4848%" y="405" width="0.0388%" height="15" fill="rgb(219,102,11)" fg:x="25" fg:w="2"/><text x="0.7348%" y="415.50"></text></g><g><title>`0x7FFC031324E9 (1 samples, 0.02%)</title><rect x="0.5042%" y="389" width="0.0194%" height="15" fill="rgb(243,110,44)" fg:x="26" fg:w="1"/><text x="0.7542%" y="399.50"></text></g><g><title>`0x7FFC03223414 (1 samples, 0.02%)</title><rect x="0.5042%" y="373" width="0.0194%" height="15" fill="rgb(222,74,54)" fg:x="26" fg:w="1"/><text x="0.7542%" y="383.50"></text></g><g><title>`0x7FFC0313E4B1 (4 samples, 0.08%)</title><rect x="0.4654%" y="453" width="0.0776%" height="15" fill="rgb(216,99,12)" fg:x="24" fg:w="4"/><text x="0.7154%" y="463.50"></text></g><g><title>`0x7FFC0313D270 (4 samples, 0.08%)</title><rect x="0.4654%" y="437" width="0.0776%" height="15" fill="rgb(226,22,26)" fg:x="24" fg:w="4"/><text x="0.7154%" y="447.50"></text></g><g><title>`0x7FFC0312FDA1 (1 samples, 0.02%)</title><rect x="0.5236%" y="421" width="0.0194%" height="15" fill="rgb(217,163,10)" fg:x="27" fg:w="1"/><text x="0.7736%" y="431.50"></text></g><g><title>`0x7FFC030D2F14 (1 samples, 0.02%)</title><rect x="0.5236%" y="405" width="0.0194%" height="15" fill="rgb(213,25,53)" fg:x="27" fg:w="1"/><text x="0.7736%" y="415.50"></text></g><g><title>`0x7FFC0313032F (1 samples, 0.02%)</title><rect x="0.5430%" y="293" width="0.0194%" height="15" fill="rgb(252,105,26)" fg:x="28" fg:w="1"/><text x="0.7930%" y="303.50"></text></g><g><title>`0x7FFC03130BB0 (1 samples, 0.02%)</title><rect x="0.5430%" y="277" width="0.0194%" height="15" fill="rgb(220,39,43)" fg:x="28" fg:w="1"/><text x="0.7930%" y="287.50"></text></g><g><title>`0x7FFC03130EE3 (1 samples, 0.02%)</title><rect x="0.5430%" y="261" width="0.0194%" height="15" fill="rgb(229,68,48)" fg:x="28" fg:w="1"/><text x="0.7930%" y="271.50"></text></g><g><title>`0x7FFC032239D4 (1 samples, 0.02%)</title><rect x="0.5430%" y="245" width="0.0194%" height="15" fill="rgb(252,8,32)" fg:x="28" fg:w="1"/><text x="0.7930%" y="255.50"></text></g><g><title>`0x7FFC0312D42E (1 samples, 0.02%)</title><rect x="0.5623%" y="261" width="0.0194%" height="15" fill="rgb(223,20,43)" fg:x="29" fg:w="1"/><text x="0.8123%" y="271.50"></text></g><g><title>`0x7FFC0312D9EB (1 samples, 0.02%)</title><rect x="0.5623%" y="245" width="0.0194%" height="15" fill="rgb(229,81,49)" fg:x="29" fg:w="1"/><text x="0.8123%" y="255.50"></text></g><g><title>`0x7FFC03223734 (1 samples, 0.02%)</title><rect x="0.5623%" y="229" width="0.0194%" height="15" fill="rgb(236,28,36)" fg:x="29" fg:w="1"/><text x="0.8123%" y="239.50"></text></g><g><title>`0x7FFC0310A510 (3 samples, 0.06%)</title><rect x="0.5430%" y="325" width="0.0582%" height="15" fill="rgb(249,185,26)" fg:x="28" fg:w="3"/><text x="0.7930%" y="335.50"></text></g><g><title>`0x7FFC0312FDB4 (3 samples, 0.06%)</title><rect x="0.5430%" y="309" width="0.0582%" height="15" fill="rgb(249,174,33)" fg:x="28" fg:w="3"/><text x="0.7930%" y="319.50"></text></g><g><title>`0x7FFC0313039D (2 samples, 0.04%)</title><rect x="0.5623%" y="293" width="0.0388%" height="15" fill="rgb(233,201,37)" fg:x="29" fg:w="2"/><text x="0.8123%" y="303.50"></text></g><g><title>`0x7FFC031324CC (2 samples, 0.04%)</title><rect x="0.5623%" y="277" width="0.0388%" height="15" fill="rgb(221,78,26)" fg:x="29" fg:w="2"/><text x="0.8123%" y="287.50"></text></g><g><title>`0x7FFC0312D5A8 (1 samples, 0.02%)</title><rect x="0.5817%" y="261" width="0.0194%" height="15" fill="rgb(250,127,30)" fg:x="30" fg:w="1"/><text x="0.8317%" y="271.50"></text></g><g><title>`0x7FFC0310BABE (1 samples, 0.02%)</title><rect x="0.5817%" y="245" width="0.0194%" height="15" fill="rgb(230,49,44)" fg:x="30" fg:w="1"/><text x="0.8317%" y="255.50"></text></g><g><title>`0x7FFC0310D8EE (1 samples, 0.02%)</title><rect x="0.5817%" y="229" width="0.0194%" height="15" fill="rgb(229,67,23)" fg:x="30" fg:w="1"/><text x="0.8317%" y="239.50"></text></g><g><title>`0x7FFC0312D001 (1 samples, 0.02%)</title><rect x="0.5817%" y="213" width="0.0194%" height="15" fill="rgb(249,83,47)" fg:x="30" fg:w="1"/><text x="0.8317%" y="223.50"></text></g><g><title>`0x7FFC0312D5A8 (1 samples, 0.02%)</title><rect x="0.5817%" y="197" width="0.0194%" height="15" fill="rgb(215,43,3)" fg:x="30" fg:w="1"/><text x="0.8317%" y="207.50"></text></g><g><title>`0x7FFC0310BABE (1 samples, 0.02%)</title><rect x="0.5817%" y="181" width="0.0194%" height="15" fill="rgb(238,154,13)" fg:x="30" fg:w="1"/><text x="0.8317%" y="191.50"></text></g><g><title>`0x7FFC0310C234 (1 samples, 0.02%)</title><rect x="0.5817%" y="165" width="0.0194%" height="15" fill="rgb(219,56,2)" fg:x="30" fg:w="1"/><text x="0.8317%" y="175.50"></text></g><g><title>`0x7FFC008F0046 (4 samples, 0.08%)</title><rect x="0.5430%" y="437" width="0.0776%" height="15" fill="rgb(233,0,4)" fg:x="28" fg:w="4"/><text x="0.7930%" y="447.50"></text></g><g><title>`0x7FFC008D553D (4 samples, 0.08%)</title><rect x="0.5430%" y="421" width="0.0776%" height="15" fill="rgb(235,30,7)" fg:x="28" fg:w="4"/><text x="0.7930%" y="431.50"></text></g><g><title>`0x7FFC0086423B (4 samples, 0.08%)</title><rect x="0.5430%" y="405" width="0.0776%" height="15" fill="rgb(250,79,13)" fg:x="28" fg:w="4"/><text x="0.7930%" y="415.50"></text></g><g><title>`0x7FFC008C6225 (4 samples, 0.08%)</title><rect x="0.5430%" y="389" width="0.0776%" height="15" fill="rgb(211,146,34)" fg:x="28" fg:w="4"/><text x="0.7930%" y="399.50"></text></g><g><title>`0x7FFC009EDD0F (4 samples, 0.08%)</title><rect x="0.5430%" y="373" width="0.0776%" height="15" fill="rgb(228,22,38)" fg:x="28" fg:w="4"/><text x="0.7930%" y="383.50"></text></g><g><title>`0x7FFC030D4FB0 (4 samples, 0.08%)</title><rect x="0.5430%" y="357" width="0.0776%" height="15" fill="rgb(235,168,5)" fg:x="28" fg:w="4"/><text x="0.7930%" y="367.50"></text></g><g><title>`0x7FFC0310A190 (4 samples, 0.08%)</title><rect x="0.5430%" y="341" width="0.0776%" height="15" fill="rgb(221,155,16)" fg:x="28" fg:w="4"/><text x="0.7930%" y="351.50"></text></g><g><title>`0x7FFC0310A584 (1 samples, 0.02%)</title><rect x="0.6011%" y="325" width="0.0194%" height="15" fill="rgb(215,215,53)" fg:x="31" fg:w="1"/><text x="0.8511%" y="335.50"></text></g><g><title>`0x7FFC030C7883 (1 samples, 0.02%)</title><rect x="0.6011%" y="309" width="0.0194%" height="15" fill="rgb(223,4,10)" fg:x="31" fg:w="1"/><text x="0.8511%" y="319.50"></text></g><g><title>`0x7FFC030C8726 (1 samples, 0.02%)</title><rect x="0.6011%" y="293" width="0.0194%" height="15" fill="rgb(234,103,6)" fg:x="31" fg:w="1"/><text x="0.8511%" y="303.50"></text></g><g><title>`0x7FFC030C86FA (1 samples, 0.02%)</title><rect x="0.6011%" y="277" width="0.0194%" height="15" fill="rgb(227,97,0)" fg:x="31" fg:w="1"/><text x="0.8511%" y="287.50"></text></g><g><title>`0x7FFC031337AC (1 samples, 0.02%)</title><rect x="0.6011%" y="261" width="0.0194%" height="15" fill="rgb(234,150,53)" fg:x="31" fg:w="1"/><text x="0.8511%" y="271.50"></text></g><g><title>`0x7FFC0313483E (1 samples, 0.02%)</title><rect x="0.6011%" y="245" width="0.0194%" height="15" fill="rgb(228,201,54)" fg:x="31" fg:w="1"/><text x="0.8511%" y="255.50"></text></g><g><title>`0x7FFC03220EDE (1 samples, 0.02%)</title><rect x="0.6011%" y="229" width="0.0194%" height="15" fill="rgb(222,22,37)" fg:x="31" fg:w="1"/><text x="0.8511%" y="239.50"></text></g><g><title>`0x7FFC020B7A67 (1 samples, 0.02%)</title><rect x="0.6011%" y="213" width="0.0194%" height="15" fill="rgb(237,53,32)" fg:x="31" fg:w="1"/><text x="0.8511%" y="223.50"></text></g><g><title>`0x7FFC020B7CF8 (1 samples, 0.02%)</title><rect x="0.6011%" y="197" width="0.0194%" height="15" fill="rgb(233,25,53)" fg:x="31" fg:w="1"/><text x="0.8511%" y="207.50"></text></g><g><title>`0x7FFC0212E030 (1 samples, 0.02%)</title><rect x="0.6011%" y="181" width="0.0194%" height="15" fill="rgb(210,40,34)" fg:x="31" fg:w="1"/><text x="0.8511%" y="191.50"></text></g><g><title>`0x7FFC008F008B (1 samples, 0.02%)</title><rect x="0.6205%" y="437" width="0.0194%" height="15" fill="rgb(241,220,44)" fg:x="32" fg:w="1"/><text x="0.8705%" y="447.50"></text></g><g><title>`0x7FFC008D7440 (1 samples, 0.02%)</title><rect x="0.6205%" y="421" width="0.0194%" height="15" fill="rgb(235,28,35)" fg:x="32" fg:w="1"/><text x="0.8705%" y="431.50"></text></g><g><title>kaori.exe`std::rt::init (1 samples, 0.02%)</title><rect x="0.6399%" y="325" width="0.0194%" height="15" fill="rgb(210,56,17)" fg:x="33" fg:w="1"/><text x="0.8899%" y="335.50"></text></g><g><title>kaori.exe`std::thread::current::current_id (1 samples, 0.02%)</title><rect x="0.6399%" y="309" width="0.0194%" height="15" fill="rgb(224,130,29)" fg:x="33" fg:w="1"/><text x="0.8899%" y="319.50"></text></g><g><title>kaori.exe`std::thread::current::id::get_or_init (1 samples, 0.02%)</title><rect x="0.6399%" y="293" width="0.0194%" height="15" fill="rgb(235,212,8)" fg:x="33" fg:w="1"/><text x="0.8899%" y="303.50"></text></g><g><title>kaori.exe`std::thread::current::id::get (1 samples, 0.02%)</title><rect x="0.6399%" y="277" width="0.0194%" height="15" fill="rgb(223,33,50)" fg:x="33" fg:w="1"/><text x="0.8899%" y="287.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::c::SetThreadDescription::load (1 samples, 0.02%)</title><rect x="0.6399%" y="261" width="0.0194%" height="15" fill="rgb(219,149,13)" fg:x="33" fg:w="1"/><text x="0.8899%" y="271.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::c::SetThreadDescription::load_from_module (1 samples, 0.02%)</title><rect x="0.6399%" y="245" width="0.0194%" height="15" fill="rgb(250,156,29)" fg:x="33" fg:w="1"/><text x="0.8899%" y="255.50"></text></g><g><title>`0x7FFC00A881BC (1 samples, 0.02%)</title><rect x="0.6399%" y="229" width="0.0194%" height="15" fill="rgb(216,193,19)" fg:x="33" fg:w="1"/><text x="0.8899%" y="239.50"></text></g><g><title>`0x7FFC030C7FC7 (1 samples, 0.02%)</title><rect x="0.6399%" y="213" width="0.0194%" height="15" fill="rgb(216,135,14)" fg:x="33" fg:w="1"/><text x="0.8899%" y="223.50"></text></g><g><title>`0x7FFC030D40DD (1 samples, 0.02%)</title><rect x="0.6399%" y="197" width="0.0194%" height="15" fill="rgb(241,47,5)" fg:x="33" fg:w="1"/><text x="0.8899%" y="207.50"></text></g><g><title>`0x7FFC0310AABE (1 samples, 0.02%)</title><rect x="0.6399%" y="181" width="0.0194%" height="15" fill="rgb(233,42,35)" fg:x="33" fg:w="1"/><text x="0.8899%" y="191.50"></text></g><g><title>`0x7FFC030D62B0 (1 samples, 0.02%)</title><rect x="0.6399%" y="165" width="0.0194%" height="15" fill="rgb(231,13,6)" fg:x="33" fg:w="1"/><text x="0.8899%" y="175.50"></text></g><g><title>`0x7FFC030D6DA2 (1 samples, 0.02%)</title><rect x="0.6399%" y="149" width="0.0194%" height="15" fill="rgb(207,181,40)" fg:x="33" fg:w="1"/><text x="0.8899%" y="159.50"></text></g><g><title>`0x7FFC03184D68 (1 samples, 0.02%)</title><rect x="0.6399%" y="133" width="0.0194%" height="15" fill="rgb(254,173,49)" fg:x="33" fg:w="1"/><text x="0.8899%" y="143.50"></text></g><g><title>kaori.exe`kaori::program::run_lexical_analysis (1 samples, 0.02%)</title><rect x="0.6593%" y="229" width="0.0194%" height="15" fill="rgb(221,1,38)" fg:x="34" fg:w="1"/><text x="0.9093%" y="239.50"></text></g><g><title>kaori.exe`kaori::lexer::lexer::Lexer::tokenize (1 samples, 0.02%)</title><rect x="0.6593%" y="213" width="0.0194%" height="15" fill="rgb(206,124,46)" fg:x="34" fg:w="1"/><text x="0.9093%" y="223.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;tuple$ (1 samples, 0.02%)</title><rect x="0.6593%" y="197" width="0.0194%" height="15" fill="rgb(249,21,11)" fg:x="34" fg:w="1"/><text x="0.9093%" y="207.50"></text></g><g><title>kaori.exe`kaori::lexer::lexer::Lexer::get_next_token (1 samples, 0.02%)</title><rect x="0.6593%" y="181" width="0.0194%" height="15" fill="rgb(222,201,40)" fg:x="34" fg:w="1"/><text x="0.9093%" y="191.50"></text></g><g><title>kaori.exe`kaori::lexer::lexer::Lexer::identifier_or_keyword (1 samples, 0.02%)</title><rect x="0.6593%" y="165" width="0.0194%" height="15" fill="rgb(235,61,29)" fg:x="34" fg:w="1"/><text x="0.9093%" y="175.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::lexer::token::Token,alloc::alloc::Global&gt;::push (1 samples, 0.02%)</title><rect x="0.6593%" y="149" width="0.0194%" height="15" fill="rgb(219,207,3)" fg:x="34" fg:w="1"/><text x="0.9093%" y="159.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::lexer::token::Token,alloc::alloc::Global&gt;::push_mut (1 samples, 0.02%)</title><rect x="0.6593%" y="133" width="0.0194%" height="15" fill="rgb(222,56,46)" fg:x="34" fg:w="1"/><text x="0.9093%" y="143.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::lexer::token::Token,alloc::alloc::Global&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="0.6593%" y="117" width="0.0194%" height="15" fill="rgb(239,76,54)" fg:x="34" fg:w="1"/><text x="0.9093%" y="127.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::lexer::token::Token,alloc::alloc::Global&gt;::ptr (1 samples, 0.02%)</title><rect x="0.6593%" y="101" width="0.0194%" height="15" fill="rgb(231,124,27)" fg:x="34" fg:w="1"/><text x="0.9093%" y="111.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1 samples, 0.02%)</title><rect x="0.6593%" y="85" width="0.0194%" height="15" fill="rgb(249,195,6)" fg:x="34" fg:w="1"/><text x="0.9093%" y="95.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1 samples, 0.02%)</title><rect x="0.6593%" y="69" width="0.0194%" height="15" fill="rgb(237,174,47)" fg:x="34" fg:w="1"/><text x="0.9093%" y="79.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::lexer::token::Token,alloc::alloc::Global&gt;::grow_one&lt;kaori::lexer::token::Token,alloc::alloc::Global&gt; (1 samples, 0.02%)</title><rect x="0.6593%" y="53" width="0.0194%" height="15" fill="rgb(206,201,31)" fg:x="34" fg:w="1"/><text x="0.9093%" y="63.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (2 samples, 0.04%)</title><rect x="0.6593%" y="261" width="0.0388%" height="15" fill="rgb(231,57,52)" fg:x="34" fg:w="2"/><text x="0.9093%" y="271.50"></text></g><g><title>kaori.exe`kaori::program::compile_source_code (2 samples, 0.04%)</title><rect x="0.6593%" y="245" width="0.0388%" height="15" fill="rgb(248,177,22)" fg:x="34" fg:w="2"/><text x="0.9093%" y="255.50"></text></g><g><title>kaori.exe`kaori::program::run_semantic_analysis(ref_mut$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.6787%" y="229" width="0.0194%" height="15" fill="rgb(215,211,37)" fg:x="35" fg:w="1"/><text x="0.9287%" y="239.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;alloc::vec::Vec (1 samples, 0.02%)</title><rect x="0.6787%" y="213" width="0.0194%" height="15" fill="rgb(241,128,51)" fg:x="35" fg:w="1"/><text x="0.9287%" y="223.50"></text></g><g><title>kaori.exe`kaori::semantic::resolver::Resolver::resolve(ref_mut$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.6787%" y="197" width="0.0194%" height="15" fill="rgb(227,165,31)" fg:x="35" fg:w="1"/><text x="0.9287%" y="207.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (222 samples, 4.30%)</title><rect x="4.7120%" y="149" width="4.3048%" height="15" fill="rgb(228,167,24)" fg:x="243" fg:w="222"/><text x="4.9620%" y="159.50">kaori..</text></g><g><title>kaori.exe`kaori::bytecode::value::Value::as_number (1 samples, 0.02%)</title><rect x="9.0169%" y="149" width="0.0194%" height="15" fill="rgb(228,143,12)" fg:x="465" fg:w="1"/><text x="9.2669%" y="159.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (5 samples, 0.10%)</title><rect x="9.4823%" y="101" width="0.0970%" height="15" fill="rgb(249,149,8)" fg:x="489" fg:w="5"/><text x="9.7323%" y="111.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::get_value (247 samples, 4.79%)</title><rect x="9.0363%" y="149" width="4.7896%" height="15" fill="rgb(243,35,44)" fg:x="466" fg:w="247"/><text x="9.2863%" y="159.50">kaori...</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (224 samples, 4.34%)</title><rect x="9.4823%" y="133" width="4.3436%" height="15" fill="rgb(246,89,9)" fg:x="489" fg:w="224"/><text x="9.7323%" y="143.50">kaori..</text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (224 samples, 4.34%)</title><rect x="9.4823%" y="117" width="4.3436%" height="15" fill="rgb(233,213,13)" fg:x="489" fg:w="224"/><text x="9.7323%" y="127.50">kaori..</text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (219 samples, 4.25%)</title><rect x="9.5792%" y="101" width="4.2467%" height="15" fill="rgb(233,141,41)" fg:x="494" fg:w="219"/><text x="9.8292%" y="111.50">kaori..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_add(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (681 samples, 13.21%)</title><rect x="0.7175%" y="165" width="13.2054%" height="15" fill="rgb(239,167,4)" fg:x="37" fg:w="681"/><text x="0.9675%" y="175.50">kaori.exe`kaori::vir..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::set_value (5 samples, 0.10%)</title><rect x="13.8259%" y="149" width="0.0970%" height="15" fill="rgb(209,217,16)" fg:x="713" fg:w="5"/><text x="14.0759%" y="159.50"></text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (5 samples, 0.10%)</title><rect x="13.8259%" y="133" width="0.0970%" height="15" fill="rgb(219,88,35)" fg:x="713" fg:w="5"/><text x="14.0759%" y="143.50"></text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (5 samples, 0.10%)</title><rect x="13.8259%" y="117" width="0.0970%" height="15" fill="rgb(220,193,23)" fg:x="713" fg:w="5"/><text x="14.0759%" y="127.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (5 samples, 0.10%)</title><rect x="13.8259%" y="101" width="0.0970%" height="15" fill="rgb(230,90,52)" fg:x="713" fg:w="5"/><text x="14.0759%" y="111.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_conditional_jump(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (1,093 samples, 21.19%)</title><rect x="13.9228%" y="165" width="21.1945%" height="15" fill="rgb(252,106,19)" fg:x="718" fg:w="1093"/><text x="14.1728%" y="175.50">kaori.exe`kaori::virtual_machine:..</text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (531 samples, 10.30%)</title><rect x="24.8206%" y="149" width="10.2967%" height="15" fill="rgb(206,74,20)" fg:x="1280" fg:w="531"/><text x="25.0706%" y="159.50">kaori.exe`enum2..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_jump(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (440 samples, 8.53%)</title><rect x="35.1173%" y="165" width="8.5321%" height="15" fill="rgb(230,138,44)" fg:x="1811" fg:w="440"/><text x="35.3673%" y="175.50">kaori.exe`ka..</text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (28 samples, 0.54%)</title><rect x="43.1065%" y="149" width="0.5430%" height="15" fill="rgb(235,182,43)" fg:x="2223" fg:w="28"/><text x="43.3565%" y="159.50"></text></g><g><title>kaori.exe`kaori::bytecode::value::Value::as_number (1 samples, 0.02%)</title><rect x="48.7881%" y="149" width="0.0194%" height="15" fill="rgb(242,16,51)" fg:x="2516" fg:w="1"/><text x="49.0381%" y="159.50"></text></g><g><title>kaori.exe`kaori::bytecode::value::Value::boolean (439 samples, 8.51%)</title><rect x="48.8074%" y="149" width="8.5127%" height="15" fill="rgb(248,9,4)" fg:x="2517" fg:w="439"/><text x="49.0574%" y="159.50">kaori.exe`ka..</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (8 samples, 0.16%)</title><rect x="62.2067%" y="101" width="0.1551%" height="15" fill="rgb(210,31,22)" fg:x="3208" fg:w="8"/><text x="62.4567%" y="111.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_ptr (8 samples, 0.16%)</title><rect x="62.2067%" y="85" width="0.1551%" height="15" fill="rgb(239,54,39)" fg:x="3208" fg:w="8"/><text x="62.4567%" y="95.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::ptr (8 samples, 0.16%)</title><rect x="62.2067%" y="69" width="0.1551%" height="15" fill="rgb(230,99,41)" fg:x="3208" fg:w="8"/><text x="62.4567%" y="79.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (8 samples, 0.16%)</title><rect x="62.2067%" y="53" width="0.1551%" height="15" fill="rgb(253,106,12)" fg:x="3208" fg:w="8"/><text x="62.4567%" y="63.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (8 samples, 0.16%)</title><rect x="62.2067%" y="37" width="0.1551%" height="15" fill="rgb(213,46,41)" fg:x="3208" fg:w="8"/><text x="62.4567%" y="47.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::get_value (330 samples, 6.40%)</title><rect x="57.3201%" y="149" width="6.3991%" height="15" fill="rgb(215,133,35)" fg:x="2956" fg:w="330"/><text x="57.5701%" y="159.50">kaori.ex..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (78 samples, 1.51%)</title><rect x="62.2067%" y="133" width="1.5125%" height="15" fill="rgb(213,28,5)" fg:x="3208" fg:w="78"/><text x="62.4567%" y="143.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (78 samples, 1.51%)</title><rect x="62.2067%" y="117" width="1.5125%" height="15" fill="rgb(215,77,49)" fg:x="3208" fg:w="78"/><text x="62.4567%" y="127.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (70 samples, 1.36%)</title><rect x="62.3618%" y="101" width="1.3574%" height="15" fill="rgb(248,100,22)" fg:x="3216" fg:w="70"/><text x="62.6118%" y="111.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_less(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (1,105 samples, 21.43%)</title><rect x="43.6494%" y="165" width="21.4272%" height="15" fill="rgb(208,67,9)" fg:x="2251" fg:w="1105"/><text x="43.8994%" y="175.50">kaori.exe`kaori::virtual_machine::..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::set_value (70 samples, 1.36%)</title><rect x="63.7192%" y="149" width="1.3574%" height="15" fill="rgb(219,133,21)" fg:x="3286" fg:w="70"/><text x="63.9692%" y="159.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (7 samples, 0.14%)</title><rect x="73.2403%" y="149" width="0.1357%" height="15" fill="rgb(246,46,29)" fg:x="3777" fg:w="7"/><text x="73.4903%" y="159.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (74 samples, 1.43%)</title><rect x="73.4148%" y="101" width="1.4349%" height="15" fill="rgb(246,185,52)" fg:x="3786" fg:w="74"/><text x="73.6648%" y="111.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_ptr (74 samples, 1.43%)</title><rect x="73.4148%" y="85" width="1.4349%" height="15" fill="rgb(252,136,11)" fg:x="3786" fg:w="74"/><text x="73.6648%" y="95.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::ptr (74 samples, 1.43%)</title><rect x="73.4148%" y="69" width="1.4349%" height="15" fill="rgb(219,138,53)" fg:x="3786" fg:w="74"/><text x="73.6648%" y="79.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (74 samples, 1.43%)</title><rect x="73.4148%" y="53" width="1.4349%" height="15" fill="rgb(211,51,23)" fg:x="3786" fg:w="74"/><text x="73.6648%" y="63.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (74 samples, 1.43%)</title><rect x="73.4148%" y="37" width="1.4349%" height="15" fill="rgb(247,221,28)" fg:x="3786" fg:w="74"/><text x="73.6648%" y="47.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::get_value (157 samples, 3.04%)</title><rect x="73.3760%" y="149" width="3.0444%" height="15" fill="rgb(251,222,45)" fg:x="3784" fg:w="157"/><text x="73.6260%" y="159.50">kao..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (155 samples, 3.01%)</title><rect x="73.4148%" y="133" width="3.0056%" height="15" fill="rgb(217,162,53)" fg:x="3786" fg:w="155"/><text x="73.6648%" y="143.50">kao..</text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (155 samples, 3.01%)</title><rect x="73.4148%" y="117" width="3.0056%" height="15" fill="rgb(229,93,14)" fg:x="3786" fg:w="155"/><text x="73.6648%" y="127.50">kao..</text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (81 samples, 1.57%)</title><rect x="74.8497%" y="101" width="1.5707%" height="15" fill="rgb(209,67,49)" fg:x="3860" fg:w="81"/><text x="75.0997%" y="111.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place (5,118 samples, 99.24%)</title><rect x="0.7175%" y="245" width="99.2437%" height="15" fill="rgb(213,87,29)" fg:x="37" fg:w="5118"/><text x="0.9675%" y="255.50">kaori.exe`core::ptr::drop_in_place</text></g><g><title>kaori.exe`core::ptr::drop_in_place (5,118 samples, 99.24%)</title><rect x="0.7175%" y="229" width="99.2437%" height="15" fill="rgb(205,151,52)" fg:x="37" fg:w="5118"/><text x="0.9675%" y="239.50">kaori.exe`core::ptr::drop_in_place</text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec (5,118 samples, 99.24%)</title><rect x="0.7175%" y="213" width="99.2437%" height="15" fill="rgb(253,215,39)" fg:x="37" fg:w="5118"/><text x="0.9675%" y="223.50">kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec</text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (5,118 samples, 99.24%)</title><rect x="0.7175%" y="197" width="99.2437%" height="15" fill="rgb(221,220,41)" fg:x="37" fg:w="5118"/><text x="0.9675%" y="207.50">kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec</text></g><g><title>kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (5,118 samples, 99.24%)</title><rect x="0.7175%" y="181" width="99.2437%" height="15" fill="rgb(218,133,21)" fg:x="37" fg:w="5118"/><text x="0.9675%" y="191.50">kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_move(kaori::virtual_machine::kaori_vm::VMContext*, enum2$ (1,799 samples, 34.88%)</title><rect x="65.0766%" y="165" width="34.8846%" height="15" fill="rgb(221,193,43)" fg:x="3356" fg:w="1799"/><text x="65.3266%" y="175.50">kaori.exe`kaori::virtual_machine::kaori_vm::instruction_m..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::set_value (1,214 samples, 23.54%)</title><rect x="76.4204%" y="149" width="23.5408%" height="15" fill="rgb(240,128,52)" fg:x="3941" fg:w="1214"/><text x="76.6704%" y="159.50">kaori.exe`kaori::virtual_machine::kao..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (6 samples, 0.12%)</title><rect x="99.8449%" y="133" width="0.1163%" height="15" fill="rgb(253,114,12)" fg:x="5149" fg:w="6"/><text x="100.0949%" y="143.50"></text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (6 samples, 0.12%)</title><rect x="99.8449%" y="117" width="0.1163%" height="15" fill="rgb(215,223,47)" fg:x="5149" fg:w="6"/><text x="100.0949%" y="127.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (6 samples, 0.12%)</title><rect x="99.8449%" y="101" width="0.1163%" height="15" fill="rgb(248,225,23)" fg:x="5149" fg:w="6"/><text x="100.0949%" y="111.50"></text></g><g><title>kaori.exe`kaori::program::run_program (5,122 samples, 99.32%)</title><rect x="0.6593%" y="277" width="99.3213%" height="15" fill="rgb(250,108,0)" fg:x="34" fg:w="5122"/><text x="0.9093%" y="287.50">kaori.exe`kaori::program::run_program</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::run_vm(alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::instruction::Instruction&gt;,alloc::alloc::Global&gt;, alloc::vec::Vec (5,120 samples, 99.28%)</title><rect x="0.6981%" y="261" width="99.2825%" height="15" fill="rgb(228,208,7)" fg:x="36" fg:w="5120"/><text x="0.9481%" y="271.50">kaori.exe`kaori::virtual_machine::kaori_vm::run_vm(alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::instruction::Instruction&gt;,alloc::alloc::Global&gt;, alloc::vec::Vec</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::VMContext::new(unsigned long long, alloc::vec::Vec (1 samples, 0.02%)</title><rect x="99.9612%" y="245" width="0.0194%" height="15" fill="rgb(244,45,10)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="255.50"></text></g><g><title>kaori.exe`alloc::vec::from_elem (1 samples, 0.02%)</title><rect x="99.9612%" y="229" width="0.0194%" height="15" fill="rgb(207,125,25)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="239.50"></text></g><g><title>kaori.exe`alloc::vec::spec_from_elem::impl$0::from_elem (1 samples, 0.02%)</title><rect x="99.9612%" y="213" width="0.0194%" height="15" fill="rgb(210,195,18)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="223.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="99.9612%" y="197" width="0.0194%" height="15" fill="rgb(249,80,12)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="207.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="99.9612%" y="181" width="0.0194%" height="15" fill="rgb(221,65,9)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="191.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="99.9612%" y="165" width="0.0194%" height="15" fill="rgb(235,49,36)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="175.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1 samples, 0.02%)</title><rect x="99.9612%" y="149" width="0.0194%" height="15" fill="rgb(225,32,20)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="159.50"></text></g><g><title>`0x7FFC03110E14 (1 samples, 0.02%)</title><rect x="99.9612%" y="133" width="0.0194%" height="15" fill="rgb(215,141,46)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="143.50"></text></g><g><title>`0x7FFC03111241 (1 samples, 0.02%)</title><rect x="99.9612%" y="117" width="0.0194%" height="15" fill="rgb(250,160,47)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="127.50"></text></g><g><title>`0x7FFC030E6E64 (1 samples, 0.02%)</title><rect x="99.9612%" y="101" width="0.0194%" height="15" fill="rgb(216,222,40)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="111.50"></text></g><g><title>`0x7FFC0322992C (1 samples, 0.02%)</title><rect x="99.9612%" y="85" width="0.0194%" height="15" fill="rgb(234,217,39)" fg:x="5155" fg:w="1"/><text x="100.2112%" y="95.50"></text></g><g><title>all (5,157 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(207,178,40)" fg:x="0" fg:w="5157"/><text x="0.2500%" y="511.50"></text></g><g><title>`0x7FFC030C8D9C (5,133 samples, 99.53%)</title><rect x="0.4654%" y="485" width="99.5346%" height="15" fill="rgb(221,136,13)" fg:x="24" fg:w="5133"/><text x="0.7154%" y="495.50">`0x7FFC030C8D9C</text></g><g><title>`0x7FFC022EE8D7 (5,133 samples, 99.53%)</title><rect x="0.4654%" y="469" width="99.5346%" height="15" fill="rgb(249,199,10)" fg:x="24" fg:w="5133"/><text x="0.7154%" y="479.50">`0x7FFC022EE8D7</text></g><g><title>kaori.exe`__scrt_common_main_seh() (5,129 samples, 99.46%)</title><rect x="0.5430%" y="453" width="99.4570%" height="15" fill="rgb(249,222,13)" fg:x="28" fg:w="5129"/><text x="0.7930%" y="463.50">kaori.exe`__scrt_common_main_seh()</text></g><g><title>kaori.exe`invoke_main() (5,124 samples, 99.36%)</title><rect x="0.6399%" y="437" width="99.3601%" height="15" fill="rgb(244,185,38)" fg:x="33" fg:w="5124"/><text x="0.8899%" y="447.50">kaori.exe`invoke_main()</text></g><g><title>kaori.exe`main (5,124 samples, 99.36%)</title><rect x="0.6399%" y="421" width="99.3601%" height="15" fill="rgb(236,202,9)" fg:x="33" fg:w="5124"/><text x="0.8899%" y="431.50">kaori.exe`main</text></g><g><title>kaori.exe`std::rt::lang_start_internal (5,124 samples, 99.36%)</title><rect x="0.6399%" y="405" width="99.3601%" height="15" fill="rgb(250,229,37)" fg:x="33" fg:w="5124"/><text x="0.8899%" y="415.50">kaori.exe`std::rt::lang_start_internal</text></g><g><title>kaori.exe`std::panic::catch_unwind (5,124 samples, 99.36%)</title><rect x="0.6399%" y="389" width="99.3601%" height="15" fill="rgb(206,174,23)" fg:x="33" fg:w="5124"/><text x="0.8899%" y="399.50">kaori.exe`std::panic::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind (5,124 samples, 99.36%)</title><rect x="0.6399%" y="373" width="99.3601%" height="15" fill="rgb(211,33,43)" fg:x="33" fg:w="5124"/><text x="0.8899%" y="383.50">kaori.exe`std::panicking::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind::do_call (5,124 samples, 99.36%)</title><rect x="0.6399%" y="357" width="99.3601%" height="15" fill="rgb(245,58,50)" fg:x="33" fg:w="5124"/><text x="0.8899%" y="367.50">kaori.exe`std::panicking::catch_unwind::do_call</text></g><g><title>kaori.exe`std::rt::lang_start_internal::closure$0 (5,124 samples, 99.36%)</title><rect x="0.6399%" y="341" width="99.3601%" height="15" fill="rgb(244,68,36)" fg:x="33" fg:w="5124"/><text x="0.8899%" y="351.50">kaori.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (5,123 samples, 99.34%)</title><rect x="0.6593%" y="325" width="99.3407%" height="15" fill="rgb(232,229,15)" fg:x="34" fg:w="5123"/><text x="0.9093%" y="335.50">kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (5,123 samples, 99.34%)</title><rect x="0.6593%" y="309" width="99.3407%" height="15" fill="rgb(254,30,23)" fg:x="34" fg:w="5123"/><text x="0.9093%" y="319.50">kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>kaori.exe`kaori::main (5,123 samples, 99.34%)</title><rect x="0.6593%" y="293" width="99.3407%" height="15" fill="rgb(235,160,14)" fg:x="34" fg:w="5123"/><text x="0.9093%" y="303.50">kaori.exe`kaori::main</text></g><g><title>kaori.exe`std::fs::read_to_string(ref$ (1 samples, 0.02%)</title><rect x="99.9806%" y="277" width="0.0194%" height="15" fill="rgb(212,155,44)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="287.50"></text></g><g><title>kaori.exe`std::fs::read_to_string::inner (1 samples, 0.02%)</title><rect x="99.9806%" y="261" width="0.0194%" height="15" fill="rgb(226,2,50)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="271.50"></text></g><g><title>kaori.exe`std::fs::File::metadata (1 samples, 0.02%)</title><rect x="99.9806%" y="245" width="0.0194%" height="15" fill="rgb(234,177,6)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="255.50"></text></g><g><title>kaori.exe`core::result::Result::map (1 samples, 0.02%)</title><rect x="99.9806%" y="229" width="0.0194%" height="15" fill="rgb(217,24,9)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="239.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::file_attr (1 samples, 0.02%)</title><rect x="99.9806%" y="213" width="0.0194%" height="15" fill="rgb(220,13,46)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="223.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::cvt (1 samples, 0.02%)</title><rect x="99.9806%" y="197" width="0.0194%" height="15" fill="rgb(239,221,27)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="207.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::impl$3::is_zero (1 samples, 0.02%)</title><rect x="99.9806%" y="181" width="0.0194%" height="15" fill="rgb(222,198,25)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="191.50"></text></g><g><title>`0x7FFC00A4B3A9 (1 samples, 0.02%)</title><rect x="99.9806%" y="165" width="0.0194%" height="15" fill="rgb(211,99,13)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="175.50"></text></g><g><title>`0x7FFC03223B54 (1 samples, 0.02%)</title><rect x="99.9806%" y="149" width="0.0194%" height="15" fill="rgb(232,111,31)" fg:x="5156" fg:w="1"/><text x="100.2306%" y="159.50"></text></g></svg></svg>