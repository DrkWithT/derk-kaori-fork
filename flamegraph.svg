<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="5531"><g><title>`0x7FF832443B11 (1 samples, 0.02%)</title><rect x="0.0000%" y="533" width="0.0181%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>`0x7FF8324441B2 (1 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0181%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>`0x7FF8324E8217 (1 samples, 0.02%)</title><rect x="0.0000%" y="501" width="0.0181%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>`0x7FF8324E83BD (1 samples, 0.02%)</title><rect x="0.0000%" y="485" width="0.0181%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>`0x7FF8324E8793 (1 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0181%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>`0x7FF8324E8990 (1 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0181%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>`0x7FF8324E8078 (1 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0181%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>`0x7FF8325A1E34 (1 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0181%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>`0x7FF8324B41BA (2 samples, 0.04%)</title><rect x="0.0000%" y="549" width="0.0362%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="559.50"></text></g><g><title>`0x7FF832443C3C (1 samples, 0.02%)</title><rect x="0.0181%" y="533" width="0.0181%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2681%" y="543.50"></text></g><g><title>`0x7FF832448377 (1 samples, 0.02%)</title><rect x="0.0181%" y="517" width="0.0181%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2681%" y="527.50"></text></g><g><title>`0x7FF8325A2254 (1 samples, 0.02%)</title><rect x="0.0181%" y="501" width="0.0181%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2681%" y="511.50"></text></g><g><title>`0x7FF8324B4281 (1 samples, 0.02%)</title><rect x="0.0362%" y="549" width="0.0181%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2862%" y="559.50"></text></g><g><title>`0x7FF83247D95E (1 samples, 0.02%)</title><rect x="0.0362%" y="533" width="0.0181%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2862%" y="543.50"></text></g><g><title>`0x7FF8324B63C1 (4 samples, 0.07%)</title><rect x="0.0000%" y="581" width="0.0723%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="591.50"></text></g><g><title>`0x7FF8324B5180 (4 samples, 0.07%)</title><rect x="0.0000%" y="565" width="0.0723%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="575.50"></text></g><g><title>`0x7FF8325A1DB4 (1 samples, 0.02%)</title><rect x="0.0542%" y="549" width="0.0181%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.3042%" y="559.50"></text></g><g><title>`0x7FF832444F98 (1 samples, 0.02%)</title><rect x="0.0723%" y="389" width="0.0181%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.3223%" y="399.50"></text></g><g><title>`0x7FF83245794E (1 samples, 0.02%)</title><rect x="0.0723%" y="373" width="0.0181%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.3223%" y="383.50"></text></g><g><title>`0x7FF83245977E (1 samples, 0.02%)</title><rect x="0.0723%" y="357" width="0.0181%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.3223%" y="367.50"></text></g><g><title>`0x7FF8324449F1 (1 samples, 0.02%)</title><rect x="0.0723%" y="341" width="0.0181%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="0.3223%" y="351.50"></text></g><g><title>`0x7FF83244503C (1 samples, 0.02%)</title><rect x="0.0723%" y="325" width="0.0181%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="0.3223%" y="335.50"></text></g><g><title>`0x7FF832445B2D (1 samples, 0.02%)</title><rect x="0.0723%" y="309" width="0.0181%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="0.3223%" y="319.50"></text></g><g><title>`0x7FF83248CC7B (1 samples, 0.02%)</title><rect x="0.0723%" y="293" width="0.0181%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="0.3223%" y="303.50"></text></g><g><title>`0x7FF83258B476 (1 samples, 0.02%)</title><rect x="0.0723%" y="277" width="0.0181%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="0.3223%" y="287.50"></text></g><g><title>`0x7FF8324484CC (2 samples, 0.04%)</title><rect x="0.0723%" y="405" width="0.0362%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="2"/><text x="0.3223%" y="415.50"></text></g><g><title>`0x7FF83244503C (1 samples, 0.02%)</title><rect x="0.0904%" y="389" width="0.0181%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="0.3404%" y="399.50"></text></g><g><title>`0x7FF832445B65 (1 samples, 0.02%)</title><rect x="0.0904%" y="373" width="0.0181%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="0.3404%" y="383.50"></text></g><g><title>`0x7FF83248BBCF (1 samples, 0.02%)</title><rect x="0.0904%" y="357" width="0.0181%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="0.3404%" y="367.50"></text></g><g><title>`0x7FF8325A25F4 (1 samples, 0.02%)</title><rect x="0.0904%" y="341" width="0.0181%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="0.3404%" y="351.50"></text></g><g><title>`0x7FF8324563A0 (3 samples, 0.05%)</title><rect x="0.0723%" y="453" width="0.0542%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="3"/><text x="0.3223%" y="463.50"></text></g><g><title>`0x7FF8324B4294 (3 samples, 0.05%)</title><rect x="0.0723%" y="437" width="0.0542%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="3"/><text x="0.3223%" y="447.50"></text></g><g><title>`0x7FF83244701D (3 samples, 0.05%)</title><rect x="0.0723%" y="421" width="0.0542%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="3"/><text x="0.3223%" y="431.50"></text></g><g><title>`0x7FF8324484E9 (1 samples, 0.02%)</title><rect x="0.1085%" y="405" width="0.0181%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="1"/><text x="0.3585%" y="415.50"></text></g><g><title>`0x7FF8325A1DD4 (1 samples, 0.02%)</title><rect x="0.1085%" y="389" width="0.0181%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="1"/><text x="0.3585%" y="399.50"></text></g><g><title>`0x7FF82F670046 (4 samples, 0.07%)</title><rect x="0.0723%" y="565" width="0.0723%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="4"/><text x="0.3223%" y="575.50"></text></g><g><title>`0x7FF82F65553D (4 samples, 0.07%)</title><rect x="0.0723%" y="549" width="0.0723%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="4"/><text x="0.3223%" y="559.50"></text></g><g><title>`0x7FF82F5E423B (4 samples, 0.07%)</title><rect x="0.0723%" y="533" width="0.0723%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="4"/><text x="0.3223%" y="543.50"></text></g><g><title>`0x7FF82F646225 (4 samples, 0.07%)</title><rect x="0.0723%" y="517" width="0.0723%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="4"/><text x="0.3223%" y="527.50"></text></g><g><title>`0x7FF82FA57E0F (4 samples, 0.07%)</title><rect x="0.0723%" y="501" width="0.0723%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="4"/><text x="0.3223%" y="511.50"></text></g><g><title>`0x7FF83247FA20 (4 samples, 0.07%)</title><rect x="0.0723%" y="485" width="0.0723%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="4"/><text x="0.3223%" y="495.50"></text></g><g><title>`0x7FF832456020 (4 samples, 0.07%)</title><rect x="0.0723%" y="469" width="0.0723%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="4"/><text x="0.3223%" y="479.50"></text></g><g><title>`0x7FF832456414 (1 samples, 0.02%)</title><rect x="0.1266%" y="453" width="0.0181%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="1"/><text x="0.3766%" y="463.50"></text></g><g><title>`0x7FF8324D6203 (1 samples, 0.02%)</title><rect x="0.1266%" y="437" width="0.0181%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="1"/><text x="0.3766%" y="447.50"></text></g><g><title>`0x7FF8324D7716 (1 samples, 0.02%)</title><rect x="0.1266%" y="421" width="0.0181%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="1"/><text x="0.3766%" y="431.50"></text></g><g><title>`0x7FF8324D76EA (1 samples, 0.02%)</title><rect x="0.1266%" y="405" width="0.0181%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="1"/><text x="0.3766%" y="415.50"></text></g><g><title>`0x7FF8324497AC (1 samples, 0.02%)</title><rect x="0.1266%" y="389" width="0.0181%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="1"/><text x="0.3766%" y="399.50"></text></g><g><title>`0x7FF83244BCAE (1 samples, 0.02%)</title><rect x="0.1266%" y="373" width="0.0181%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="1"/><text x="0.3766%" y="383.50"></text></g><g><title>`0x7FF83259F89E (1 samples, 0.02%)</title><rect x="0.1266%" y="357" width="0.0181%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="1"/><text x="0.3766%" y="367.50"></text></g><g><title>`0x7FF830FF7AAF (1 samples, 0.02%)</title><rect x="0.1266%" y="341" width="0.0181%" height="15" fill="rgb(206,27,48)" fg:x="7" fg:w="1"/><text x="0.3766%" y="351.50"></text></g><g><title>`0x7FF831014762 (1 samples, 0.02%)</title><rect x="0.1266%" y="325" width="0.0181%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="1"/><text x="0.3766%" y="335.50"></text></g><g><title>`0x7FF831014954 (1 samples, 0.02%)</title><rect x="0.1266%" y="309" width="0.0181%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="0.3766%" y="319.50"></text></g><g><title>`0x7FF831014B1F (1 samples, 0.02%)</title><rect x="0.1266%" y="293" width="0.0181%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="1"/><text x="0.3766%" y="303.50"></text></g><g><title>`0x7FF82F670093 (1 samples, 0.02%)</title><rect x="0.1446%" y="565" width="0.0181%" height="15" fill="rgb(231,138,38)" fg:x="8" fg:w="1"/><text x="0.3946%" y="575.50"></text></g><g><title>`0x7FF831A418AB (1 samples, 0.02%)</title><rect x="0.1446%" y="549" width="0.0181%" height="15" fill="rgb(231,145,46)" fg:x="8" fg:w="1"/><text x="0.3946%" y="559.50"></text></g><g><title>`0x7FF8324CC67E (1 samples, 0.02%)</title><rect x="0.1446%" y="533" width="0.0181%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="1"/><text x="0.3946%" y="543.50"></text></g><g><title>`0x7FF8324CD4AF (1 samples, 0.02%)</title><rect x="0.1446%" y="517" width="0.0181%" height="15" fill="rgb(217,147,25)" fg:x="8" fg:w="1"/><text x="0.3946%" y="527.50"></text></g><g><title>`0x7FF83244BCAE (1 samples, 0.02%)</title><rect x="0.1446%" y="501" width="0.0181%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="1"/><text x="0.3946%" y="511.50"></text></g><g><title>`0x7FF83259F89E (1 samples, 0.02%)</title><rect x="0.1446%" y="485" width="0.0181%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="1"/><text x="0.3946%" y="495.50"></text></g><g><title>`0x7FF82FADD03D (1 samples, 0.02%)</title><rect x="0.1446%" y="469" width="0.0181%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="1"/><text x="0.3946%" y="479.50"></text></g><g><title>`0x7FF82FA4EC13 (1 samples, 0.02%)</title><rect x="0.1446%" y="453" width="0.0181%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="1"/><text x="0.3946%" y="463.50"></text></g><g><title>`0x7FF8324B9300 (1 samples, 0.02%)</title><rect x="0.1446%" y="437" width="0.0181%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="1"/><text x="0.3946%" y="447.50"></text></g><g><title>`0x7FF832463687 (1 samples, 0.02%)</title><rect x="0.1446%" y="421" width="0.0181%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="1"/><text x="0.3946%" y="431.50"></text></g><g><title>`0x7FF83244D8FC (1 samples, 0.02%)</title><rect x="0.1446%" y="405" width="0.0181%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="1"/><text x="0.3946%" y="415.50"></text></g><g><title>kaori.exe`kaori::program::run_semantic_analysis(ref_mut$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.1808%" y="357" width="0.0181%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="1"/><text x="0.4308%" y="367.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;std::collections::hash::map::HashMap&lt;kaori::semantic::hir_id::HirId,enum2$ (1 samples, 0.02%)</title><rect x="0.1808%" y="341" width="0.0181%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="1"/><text x="0.4308%" y="351.50"></text></g><g><title>kaori.exe`kaori::semantic::type_checker::TypeChecker::type_check(kaori::semantic::type_checker::TypeChecker, ref$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.1808%" y="325" width="0.0181%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="1"/><text x="0.4308%" y="335.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;enum2$ (1 samples, 0.02%)</title><rect x="0.1808%" y="309" width="0.0181%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="1"/><text x="0.4308%" y="319.50"></text></g><g><title>kaori.exe`kaori::semantic::type_checker::TypeChecker::type_check_declaration (1 samples, 0.02%)</title><rect x="0.1808%" y="293" width="0.0181%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="1"/><text x="0.4308%" y="303.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (1 samples, 0.02%)</title><rect x="0.1808%" y="277" width="0.0181%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="1"/><text x="0.4308%" y="287.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::semantic::hir_decl::HirDecl,alloc::alloc::Global&gt;::as_slice (1 samples, 0.02%)</title><rect x="0.1808%" y="261" width="0.0181%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="1"/><text x="0.4308%" y="271.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::semantic::hir_decl::HirDecl,alloc::alloc::Global&gt;::as_ptr (1 samples, 0.02%)</title><rect x="0.1808%" y="245" width="0.0181%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="0.4308%" y="255.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::semantic::hir_decl::HirDecl,alloc::alloc::Global&gt;::ptr (1 samples, 0.02%)</title><rect x="0.1808%" y="229" width="0.0181%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="1"/><text x="0.4308%" y="239.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1 samples, 0.02%)</title><rect x="0.1808%" y="213" width="0.0181%" height="15" fill="rgb(240,54,50)" fg:x="10" fg:w="1"/><text x="0.4308%" y="223.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1 samples, 0.02%)</title><rect x="0.1808%" y="197" width="0.0181%" height="15" fill="rgb(233,84,52)" fg:x="10" fg:w="1"/><text x="0.4308%" y="207.50"></text></g><g><title>kaori.exe`kaori::semantic::type_checker::TypeChecker::get_type_def (1 samples, 0.02%)</title><rect x="0.1808%" y="181" width="0.0181%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="0.4308%" y="191.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (2 samples, 0.04%)</title><rect x="0.1808%" y="389" width="0.0362%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="2"/><text x="0.4308%" y="399.50"></text></g><g><title>kaori.exe`kaori::program::compile_source_code (2 samples, 0.04%)</title><rect x="0.1808%" y="373" width="0.0362%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="2"/><text x="0.4308%" y="383.50"></text></g><g><title>kaori.exe`kaori::program::run_syntax_analysis (1 samples, 0.02%)</title><rect x="0.1989%" y="357" width="0.0181%" height="15" fill="rgb(236,212,23)" fg:x="11" fg:w="1"/><text x="0.4489%" y="367.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;alloc::vec::Vec (1 samples, 0.02%)</title><rect x="0.1989%" y="341" width="0.0181%" height="15" fill="rgb(242,79,21)" fg:x="11" fg:w="1"/><text x="0.4489%" y="351.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse (1 samples, 0.02%)</title><rect x="0.1989%" y="325" width="0.0181%" height="15" fill="rgb(211,96,35)" fg:x="11" fg:w="1"/><text x="0.4489%" y="335.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::VMContext::get_number (262 samples, 4.74%)</title><rect x="9.9620%" y="293" width="4.7369%" height="15" fill="rgb(253,215,40)" fg:x="551" fg:w="262"/><text x="10.2120%" y="303.50">kaori...</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::VMContext::get_value (262 samples, 4.74%)</title><rect x="9.9620%" y="277" width="4.7369%" height="15" fill="rgb(211,81,21)" fg:x="551" fg:w="262"/><text x="10.2120%" y="287.50">kaori...</text></g><g><title>kaori.exe`core::ptr::mut_ptr::impl$0::add (3 samples, 0.05%)</title><rect x="14.6447%" y="261" width="0.0542%" height="15" fill="rgb(208,190,38)" fg:x="810" fg:w="3"/><text x="14.8947%" y="271.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::VMContext::set_value (488 samples, 8.82%)</title><rect x="14.6990%" y="293" width="8.8230%" height="15" fill="rgb(235,213,38)" fg:x="813" fg:w="488"/><text x="14.9490%" y="303.50">kaori.exe`ka..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::instruction_add(kaori::virtual_machine::other_vm::VMContext*, enum2$ (1,406 samples, 25.42%)</title><rect x="0.2170%" y="309" width="25.4204%" height="15" fill="rgb(237,122,38)" fg:x="12" fg:w="1406"/><text x="0.4670%" y="319.50">kaori.exe`kaori::virtual_machine::other_v..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::dispatch_next(kaori::virtual_machine::other_vm::VMContext*, enum2$ (117 samples, 2.12%)</title><rect x="23.5220%" y="293" width="2.1153%" height="15" fill="rgb(244,218,35)" fg:x="1301" fg:w="117"/><text x="23.7720%" y="303.50">k..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::dispatch(kaori::virtual_machine::other_vm::VMContext*, enum2$ (117 samples, 2.12%)</title><rect x="23.5220%" y="277" width="2.1153%" height="15" fill="rgb(240,68,47)" fg:x="1301" fg:w="117"/><text x="23.7720%" y="287.50">k..</text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (117 samples, 2.12%)</title><rect x="23.5220%" y="261" width="2.1153%" height="15" fill="rgb(210,16,53)" fg:x="1301" fg:w="117"/><text x="23.7720%" y="271.50">k..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::instruction_conditional_jump(kaori::virtual_machine::other_vm::VMContext*, enum2$ (1,211 samples, 21.89%)</title><rect x="25.6373%" y="309" width="21.8948%" height="15" fill="rgb(235,124,12)" fg:x="1418" fg:w="1211"/><text x="25.8873%" y="319.50">kaori.exe`kaori::virtual_machine::o..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::dispatch_to(kaori::virtual_machine::other_vm::VMContext*, enum2$ (562 samples, 10.16%)</title><rect x="37.3712%" y="293" width="10.1609%" height="15" fill="rgb(224,169,11)" fg:x="2067" fg:w="562"/><text x="37.6212%" y="303.50">kaori.exe`kaori..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::dispatch(kaori::virtual_machine::other_vm::VMContext*, enum2$ (562 samples, 10.16%)</title><rect x="37.3712%" y="277" width="10.1609%" height="15" fill="rgb(250,166,2)" fg:x="2067" fg:w="562"/><text x="37.6212%" y="287.50">kaori.exe`kaori..</text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (496 samples, 8.97%)</title><rect x="38.5645%" y="261" width="8.9676%" height="15" fill="rgb(242,216,29)" fg:x="2133" fg:w="496"/><text x="38.8145%" y="271.50">kaori.exe`enu..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::instruction_jump(kaori::virtual_machine::other_vm::VMContext*, enum2$ (254 samples, 4.59%)</title><rect x="47.5321%" y="309" width="4.5923%" height="15" fill="rgb(230,116,27)" fg:x="2629" fg:w="254"/><text x="47.7821%" y="319.50">kaori..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::dispatch_to(kaori::virtual_machine::other_vm::VMContext*, enum2$ (50 samples, 0.90%)</title><rect x="51.2204%" y="293" width="0.9040%" height="15" fill="rgb(228,99,48)" fg:x="2833" fg:w="50"/><text x="51.4704%" y="303.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::dispatch(kaori::virtual_machine::other_vm::VMContext*, enum2$ (50 samples, 0.90%)</title><rect x="51.2204%" y="277" width="0.9040%" height="15" fill="rgb(253,11,6)" fg:x="2833" fg:w="50"/><text x="51.4704%" y="287.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (45 samples, 0.81%)</title><rect x="51.3108%" y="261" width="0.8136%" height="15" fill="rgb(247,143,39)" fg:x="2838" fg:w="45"/><text x="51.5608%" y="271.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::VMContext::get_number (364 samples, 6.58%)</title><rect x="58.3620%" y="293" width="6.5811%" height="15" fill="rgb(236,97,10)" fg:x="3228" fg:w="364"/><text x="58.6120%" y="303.50">kaori.exe..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::VMContext::get_value (364 samples, 6.58%)</title><rect x="58.3620%" y="277" width="6.5811%" height="15" fill="rgb(233,208,19)" fg:x="3228" fg:w="364"/><text x="58.6120%" y="287.50">kaori.exe..</text></g><g><title>kaori.exe`core::ptr::mut_ptr::impl$0::add (1 samples, 0.02%)</title><rect x="64.9250%" y="261" width="0.0181%" height="15" fill="rgb(216,164,2)" fg:x="3591" fg:w="1"/><text x="65.1750%" y="271.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::instruction_less(kaori::virtual_machine::other_vm::VMContext*, enum2$ (1,021 samples, 18.46%)</title><rect x="52.1244%" y="309" width="18.4596%" height="15" fill="rgb(220,129,5)" fg:x="2883" fg:w="1021"/><text x="52.3744%" y="319.50">kaori.exe`kaori::virtual_mach..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::VMContext::set_value (312 samples, 5.64%)</title><rect x="64.9430%" y="293" width="5.6409%" height="15" fill="rgb(242,17,10)" fg:x="3592" fg:w="312"/><text x="65.1930%" y="303.50">kaori.e..</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (2 samples, 0.04%)</title><rect x="76.6588%" y="245" width="0.0362%" height="15" fill="rgb(242,107,0)" fg:x="4240" fg:w="2"/><text x="76.9088%" y="255.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::VMContext::get_value (9 samples, 0.16%)</title><rect x="76.6227%" y="293" width="0.1627%" height="15" fill="rgb(251,28,31)" fg:x="4238" fg:w="9"/><text x="76.8727%" y="303.50"></text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (7 samples, 0.13%)</title><rect x="76.6588%" y="277" width="0.1266%" height="15" fill="rgb(233,223,10)" fg:x="4240" fg:w="7"/><text x="76.9088%" y="287.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (7 samples, 0.13%)</title><rect x="76.6588%" y="261" width="0.1266%" height="15" fill="rgb(215,21,27)" fg:x="4240" fg:w="7"/><text x="76.9088%" y="271.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (5 samples, 0.09%)</title><rect x="76.6950%" y="245" width="0.0904%" height="15" fill="rgb(232,23,21)" fg:x="4242" fg:w="5"/><text x="76.9450%" y="255.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::VMContext::set_value (1,168 samples, 21.12%)</title><rect x="76.7854%" y="293" width="21.1173%" height="15" fill="rgb(244,5,23)" fg:x="4247" fg:w="1168"/><text x="77.0354%" y="303.50">kaori.exe`kaori::virtual_machine:..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::run_other_vm(alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::instruction::Instruction&gt;,alloc::alloc::Global&gt;, alloc::vec::Vec (5,496 samples, 99.37%)</title><rect x="0.2170%" y="389" width="99.3672%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="5496"/><text x="0.4670%" y="399.50">kaori.exe`kaori::virtual_machine::other_vm::run_other_vm(alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::instruction::Instruction&gt;,alloc::alloc::Global&gt;, alloc::vec::Vec</text></g><g><title>kaori.exe`core::ptr::drop_in_place (5,496 samples, 99.37%)</title><rect x="0.2170%" y="373" width="99.3672%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="5496"/><text x="0.4670%" y="383.50">kaori.exe`core::ptr::drop_in_place</text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec (5,496 samples, 99.37%)</title><rect x="0.2170%" y="357" width="99.3672%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="5496"/><text x="0.4670%" y="367.50">kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec</text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (5,496 samples, 99.37%)</title><rect x="0.2170%" y="341" width="99.3672%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="5496"/><text x="0.4670%" y="351.50">kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec</text></g><g><title>kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (5,496 samples, 99.37%)</title><rect x="0.2170%" y="325" width="99.3672%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="5496"/><text x="0.4670%" y="335.50">kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::instruction_move(kaori::virtual_machine::other_vm::VMContext*, enum2$ (1,604 samples, 29.00%)</title><rect x="70.5840%" y="309" width="29.0002%" height="15" fill="rgb(206,192,2)" fg:x="3904" fg:w="1604"/><text x="70.8340%" y="319.50">kaori.exe`kaori::virtual_machine::other_vm::ins..</text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::dispatch_next(kaori::virtual_machine::other_vm::VMContext*, enum2$ (93 samples, 1.68%)</title><rect x="97.9027%" y="293" width="1.6814%" height="15" fill="rgb(241,108,4)" fg:x="5415" fg:w="93"/><text x="98.1527%" y="303.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::other_vm::dispatch(kaori::virtual_machine::other_vm::VMContext*, enum2$ (93 samples, 1.68%)</title><rect x="97.9027%" y="277" width="1.6814%" height="15" fill="rgb(247,173,49)" fg:x="5415" fg:w="93"/><text x="98.1527%" y="287.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (90 samples, 1.63%)</title><rect x="97.9570%" y="261" width="1.6272%" height="15" fill="rgb(224,114,35)" fg:x="5418" fg:w="90"/><text x="98.2070%" y="271.50"></text></g><g><title>kaori.exe`core::time::impl$12::fmt (1 samples, 0.02%)</title><rect x="99.5842%" y="293" width="0.0181%" height="15" fill="rgb(245,159,27)" fg:x="5508" fg:w="1"/><text x="99.8342%" y="303.50"></text></g><g><title>kaori.exe`core::time::impl$12::fmt::fmt_decimal (1 samples, 0.02%)</title><rect x="99.5842%" y="277" width="0.0181%" height="15" fill="rgb(245,172,44)" fg:x="5508" fg:w="1"/><text x="99.8342%" y="287.50"></text></g><g><title>kaori.exe`core::time::impl$12::fmt::fmt_decimal::closure$1 (1 samples, 0.02%)</title><rect x="99.5842%" y="261" width="0.0181%" height="15" fill="rgb(236,23,11)" fg:x="5508" fg:w="1"/><text x="99.8342%" y="271.50"></text></g><g><title>kaori.exe`core::fmt::Formatter::write_fmt (1 samples, 0.02%)</title><rect x="99.5842%" y="245" width="0.0181%" height="15" fill="rgb(205,117,38)" fg:x="5508" fg:w="1"/><text x="99.8342%" y="255.50"></text></g><g><title>kaori.exe`core::fmt::write (1 samples, 0.02%)</title><rect x="99.5842%" y="229" width="0.0181%" height="15" fill="rgb(237,72,25)" fg:x="5508" fg:w="1"/><text x="99.8342%" y="239.50"></text></g><g><title>kaori.exe`core::fmt::num::imp::impl$15::fmt (1 samples, 0.02%)</title><rect x="99.5842%" y="213" width="0.0181%" height="15" fill="rgb(244,70,9)" fg:x="5508" fg:w="1"/><text x="99.8342%" y="223.50"></text></g><g><title>kaori.exe`core::fmt::num::imp::impl$17::_fmt (1 samples, 0.02%)</title><rect x="99.5842%" y="197" width="0.0181%" height="15" fill="rgb(217,125,39)" fg:x="5508" fg:w="1"/><text x="99.8342%" y="207.50"></text></g><g><title>kaori.exe`core::fmt::num::imp::impl$17::_fmt_inner (1 samples, 0.02%)</title><rect x="99.5842%" y="181" width="0.0181%" height="15" fill="rgb(235,36,10)" fg:x="5508" fg:w="1"/><text x="99.8342%" y="191.50"></text></g><g><title>kaori.exe`kaori::program::run_program (5,500 samples, 99.44%)</title><rect x="0.1808%" y="405" width="99.4395%" height="15" fill="rgb(251,123,47)" fg:x="10" fg:w="5500"/><text x="0.4308%" y="415.50">kaori.exe`kaori::program::run_program</text></g><g><title>kaori.exe`std::io::stdio::_print (2 samples, 0.04%)</title><rect x="99.5842%" y="389" width="0.0362%" height="15" fill="rgb(221,13,13)" fg:x="5508" fg:w="2"/><text x="99.8342%" y="399.50"></text></g><g><title>kaori.exe`std::io::stdio::print_to (2 samples, 0.04%)</title><rect x="99.5842%" y="373" width="0.0362%" height="15" fill="rgb(238,131,9)" fg:x="5508" fg:w="2"/><text x="99.8342%" y="383.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$16::write_fmt (2 samples, 0.04%)</title><rect x="99.5842%" y="357" width="0.0362%" height="15" fill="rgb(211,50,8)" fg:x="5508" fg:w="2"/><text x="99.8342%" y="367.50"></text></g><g><title>kaori.exe`std::io::Write::write_fmt (2 samples, 0.04%)</title><rect x="99.5842%" y="341" width="0.0362%" height="15" fill="rgb(245,182,24)" fg:x="5508" fg:w="2"/><text x="99.8342%" y="351.50"></text></g><g><title>kaori.exe`std::io::default_write_fmt (2 samples, 0.04%)</title><rect x="99.5842%" y="325" width="0.0362%" height="15" fill="rgb(242,14,37)" fg:x="5508" fg:w="2"/><text x="99.8342%" y="335.50"></text></g><g><title>kaori.exe`core::fmt::write (2 samples, 0.04%)</title><rect x="99.5842%" y="309" width="0.0362%" height="15" fill="rgb(246,228,12)" fg:x="5508" fg:w="2"/><text x="99.8342%" y="319.50"></text></g><g><title>kaori.exe`std::io::default_write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.02%)</title><rect x="99.6022%" y="293" width="0.0181%" height="15" fill="rgb(213,55,15)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="303.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$19::write_all (1 samples, 0.02%)</title><rect x="99.6022%" y="277" width="0.0181%" height="15" fill="rgb(209,9,3)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="287.50"></text></g><g><title>kaori.exe`std::sync::reentrant_lock::impl$11::deref (1 samples, 0.02%)</title><rect x="99.6022%" y="261" width="0.0181%" height="15" fill="rgb(230,59,30)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="271.50"></text></g><g><title>kaori.exe`std::io::buffered::linewritershim::impl$1::write_all (1 samples, 0.02%)</title><rect x="99.6022%" y="245" width="0.0181%" height="15" fill="rgb(209,121,21)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="255.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch (1 samples, 0.02%)</title><rect x="99.6022%" y="229" width="0.0181%" height="15" fill="rgb(220,109,13)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="239.50"></text></g><g><title>kaori.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (1 samples, 0.02%)</title><rect x="99.6022%" y="213" width="0.0181%" height="15" fill="rgb(232,18,1)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="223.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$1::write (1 samples, 0.02%)</title><rect x="99.6022%" y="197" width="0.0181%" height="15" fill="rgb(215,41,42)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="207.50"></text></g><g><title>kaori.exe`std::io::stdio::handle_ebadf (1 samples, 0.02%)</title><rect x="99.6022%" y="181" width="0.0181%" height="15" fill="rgb(224,123,36)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="191.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write (1 samples, 0.02%)</title><rect x="99.6022%" y="165" width="0.0181%" height="15" fill="rgb(240,125,3)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="175.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write_console_utf16 (1 samples, 0.02%)</title><rect x="99.6022%" y="149" width="0.0181%" height="15" fill="rgb(205,98,50)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="159.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write_valid_utf8_to_console (1 samples, 0.02%)</title><rect x="99.6022%" y="133" width="0.0181%" height="15" fill="rgb(205,185,37)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="143.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write_u16s (1 samples, 0.02%)</title><rect x="99.6022%" y="117" width="0.0181%" height="15" fill="rgb(238,207,15)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="127.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::cvt (1 samples, 0.02%)</title><rect x="99.6022%" y="101" width="0.0181%" height="15" fill="rgb(213,199,42)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="111.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::impl$3::is_zero (1 samples, 0.02%)</title><rect x="99.6022%" y="85" width="0.0181%" height="15" fill="rgb(235,201,11)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="95.50"></text></g><g><title>`0x7FF82FB1E9FE (1 samples, 0.02%)</title><rect x="99.6022%" y="69" width="0.0181%" height="15" fill="rgb(207,46,11)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="79.50"></text></g><g><title>`0x7FF82FB1EB3C (1 samples, 0.02%)</title><rect x="99.6022%" y="53" width="0.0181%" height="15" fill="rgb(241,35,35)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="63.50"></text></g><g><title>`0x7FF8325A1CD4 (1 samples, 0.02%)</title><rect x="99.6022%" y="37" width="0.0181%" height="15" fill="rgb(243,32,47)" fg:x="5509" fg:w="1"/><text x="99.8522%" y="47.50"></text></g><g><title>`0x7FF8324CC53C (5,511 samples, 99.64%)</title><rect x="0.0000%" y="613" width="99.6384%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="5511"/><text x="0.2500%" y="623.50">`0x7FF8324CC53C</text></g><g><title>`0x7FF831A2E8D7 (5,511 samples, 99.64%)</title><rect x="0.0000%" y="597" width="99.6384%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="5511"/><text x="0.2500%" y="607.50">`0x7FF831A2E8D7</text></g><g><title>kaori.exe`__scrt_common_main_seh() (5,507 samples, 99.57%)</title><rect x="0.0723%" y="581" width="99.5661%" height="15" fill="rgb(243,110,44)" fg:x="4" fg:w="5507"/><text x="0.3223%" y="591.50">kaori.exe`__scrt_common_main_seh()</text></g><g><title>kaori.exe`invoke_main() (5,502 samples, 99.48%)</title><rect x="0.1627%" y="565" width="99.4757%" height="15" fill="rgb(222,74,54)" fg:x="9" fg:w="5502"/><text x="0.4127%" y="575.50">kaori.exe`invoke_main()</text></g><g><title>kaori.exe`main (5,502 samples, 99.48%)</title><rect x="0.1627%" y="549" width="99.4757%" height="15" fill="rgb(216,99,12)" fg:x="9" fg:w="5502"/><text x="0.4127%" y="559.50">kaori.exe`main</text></g><g><title>kaori.exe`std::rt::lang_start_internal (5,502 samples, 99.48%)</title><rect x="0.1627%" y="533" width="99.4757%" height="15" fill="rgb(226,22,26)" fg:x="9" fg:w="5502"/><text x="0.4127%" y="543.50">kaori.exe`std::rt::lang_start_internal</text></g><g><title>kaori.exe`std::panic::catch_unwind (5,501 samples, 99.46%)</title><rect x="0.1808%" y="517" width="99.4576%" height="15" fill="rgb(217,163,10)" fg:x="10" fg:w="5501"/><text x="0.4308%" y="527.50">kaori.exe`std::panic::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind (5,501 samples, 99.46%)</title><rect x="0.1808%" y="501" width="99.4576%" height="15" fill="rgb(213,25,53)" fg:x="10" fg:w="5501"/><text x="0.4308%" y="511.50">kaori.exe`std::panicking::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind::do_call (5,501 samples, 99.46%)</title><rect x="0.1808%" y="485" width="99.4576%" height="15" fill="rgb(252,105,26)" fg:x="10" fg:w="5501"/><text x="0.4308%" y="495.50">kaori.exe`std::panicking::catch_unwind::do_call</text></g><g><title>kaori.exe`std::rt::lang_start_internal::closure$0 (5,501 samples, 99.46%)</title><rect x="0.1808%" y="469" width="99.4576%" height="15" fill="rgb(220,39,43)" fg:x="10" fg:w="5501"/><text x="0.4308%" y="479.50">kaori.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (5,501 samples, 99.46%)</title><rect x="0.1808%" y="453" width="99.4576%" height="15" fill="rgb(229,68,48)" fg:x="10" fg:w="5501"/><text x="0.4308%" y="463.50">kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (5,501 samples, 99.46%)</title><rect x="0.1808%" y="437" width="99.4576%" height="15" fill="rgb(252,8,32)" fg:x="10" fg:w="5501"/><text x="0.4308%" y="447.50">kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>kaori.exe`kaori::main (5,501 samples, 99.46%)</title><rect x="0.1808%" y="421" width="99.4576%" height="15" fill="rgb(223,20,43)" fg:x="10" fg:w="5501"/><text x="0.4308%" y="431.50">kaori.exe`kaori::main</text></g><g><title>kaori.exe`std::fs::read_to_string::inner (1 samples, 0.02%)</title><rect x="99.6203%" y="405" width="0.0181%" height="15" fill="rgb(229,81,49)" fg:x="5510" fg:w="1"/><text x="99.8703%" y="415.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch (1 samples, 0.02%)</title><rect x="99.6203%" y="389" width="0.0181%" height="15" fill="rgb(236,28,36)" fg:x="5510" fg:w="1"/><text x="99.8703%" y="399.50"></text></g><g><title>kaori.exe`alloc::string::String::try_reserve_exact (1 samples, 0.02%)</title><rect x="99.6203%" y="373" width="0.0181%" height="15" fill="rgb(249,185,26)" fg:x="5510" fg:w="1"/><text x="99.8703%" y="383.50"></text></g><g><title>`0x7FF832529100 (1 samples, 0.02%)</title><rect x="99.6384%" y="613" width="0.0181%" height="15" fill="rgb(249,174,33)" fg:x="5511" fg:w="1"/><text x="99.8884%" y="623.50"></text></g><g><title>`0x7FF8324FC1C4 (1 samples, 0.02%)</title><rect x="99.6565%" y="565" width="0.0181%" height="15" fill="rgb(233,201,37)" fg:x="5512" fg:w="1"/><text x="99.9065%" y="575.50"></text></g><g><title>`0x7FF832536320 (1 samples, 0.02%)</title><rect x="99.6565%" y="549" width="0.0181%" height="15" fill="rgb(221,78,26)" fg:x="5512" fg:w="1"/><text x="99.9065%" y="559.50"></text></g><g><title>`0x7FF8325A2054 (1 samples, 0.02%)</title><rect x="99.6565%" y="533" width="0.0181%" height="15" fill="rgb(250,127,30)" fg:x="5512" fg:w="1"/><text x="99.9065%" y="543.50"></text></g><g><title>`0x7FF8324FC7A1 (1 samples, 0.02%)</title><rect x="99.6746%" y="565" width="0.0181%" height="15" fill="rgb(230,49,44)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="575.50"></text></g><g><title>`0x7FF83252972B (1 samples, 0.02%)</title><rect x="99.6746%" y="549" width="0.0181%" height="15" fill="rgb(229,67,23)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="559.50"></text></g><g><title>`0x7FF8325297D1 (1 samples, 0.02%)</title><rect x="99.6746%" y="533" width="0.0181%" height="15" fill="rgb(249,83,47)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="543.50"></text></g><g><title>`0x7FF8325298FA (1 samples, 0.02%)</title><rect x="99.6746%" y="517" width="0.0181%" height="15" fill="rgb(215,43,3)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="527.50"></text></g><g><title>`0x7FF832529A33 (1 samples, 0.02%)</title><rect x="99.6746%" y="501" width="0.0181%" height="15" fill="rgb(238,154,13)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="511.50"></text></g><g><title>`0x7FF832529B12 (1 samples, 0.02%)</title><rect x="99.6746%" y="485" width="0.0181%" height="15" fill="rgb(219,56,2)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="495.50"></text></g><g><title>`0x7FF83255C859 (1 samples, 0.02%)</title><rect x="99.6746%" y="469" width="0.0181%" height="15" fill="rgb(233,0,4)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="479.50"></text></g><g><title>`0x7FF832529CD0 (1 samples, 0.02%)</title><rect x="99.6746%" y="453" width="0.0181%" height="15" fill="rgb(235,30,7)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="463.50"></text></g><g><title>`0x7FF832529E32 (1 samples, 0.02%)</title><rect x="99.6746%" y="437" width="0.0181%" height="15" fill="rgb(250,79,13)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="447.50"></text></g><g><title>`0x7FF8325A49A4 (1 samples, 0.02%)</title><rect x="99.6746%" y="421" width="0.0181%" height="15" fill="rgb(211,146,34)" fg:x="5513" fg:w="1"/><text x="99.9246%" y="431.50"></text></g><g><title>`0x7FF8324FC8D8 (1 samples, 0.02%)</title><rect x="99.6926%" y="565" width="0.0181%" height="15" fill="rgb(228,22,38)" fg:x="5514" fg:w="1"/><text x="99.9426%" y="575.50"></text></g><g><title>`0x7FF8324DAB73 (1 samples, 0.02%)</title><rect x="99.6926%" y="549" width="0.0181%" height="15" fill="rgb(235,168,5)" fg:x="5514" fg:w="1"/><text x="99.9426%" y="559.50"></text></g><g><title>`0x7FF8324DAECF (1 samples, 0.02%)</title><rect x="99.6926%" y="533" width="0.0181%" height="15" fill="rgb(221,155,16)" fg:x="5514" fg:w="1"/><text x="99.9426%" y="543.50"></text></g><g><title>`0x7FF8324DB98A (1 samples, 0.02%)</title><rect x="99.6926%" y="517" width="0.0181%" height="15" fill="rgb(215,215,53)" fg:x="5514" fg:w="1"/><text x="99.9426%" y="527.50"></text></g><g><title>`0x7FF8325A5584 (1 samples, 0.02%)</title><rect x="99.6926%" y="501" width="0.0181%" height="15" fill="rgb(223,4,10)" fg:x="5514" fg:w="1"/><text x="99.9426%" y="511.50"></text></g><g><title>`0x7FF8324FCAB4 (1 samples, 0.02%)</title><rect x="99.7107%" y="565" width="0.0181%" height="15" fill="rgb(234,103,6)" fg:x="5515" fg:w="1"/><text x="99.9607%" y="575.50"></text></g><g><title>`0x7FF8325A26F4 (1 samples, 0.02%)</title><rect x="99.7107%" y="549" width="0.0181%" height="15" fill="rgb(227,97,0)" fg:x="5515" fg:w="1"/><text x="99.9607%" y="559.50"></text></g><g><title>`0x7FF832455FE2 (1 samples, 0.02%)</title><rect x="99.7288%" y="517" width="0.0181%" height="15" fill="rgb(234,150,53)" fg:x="5516" fg:w="1"/><text x="99.9788%" y="527.50"></text></g><g><title>`0x7FF832480D00 (1 samples, 0.02%)</title><rect x="99.7288%" y="501" width="0.0181%" height="15" fill="rgb(228,201,54)" fg:x="5516" fg:w="1"/><text x="99.9788%" y="511.50"></text></g><g><title>`0x7FF832481700 (1 samples, 0.02%)</title><rect x="99.7288%" y="485" width="0.0181%" height="15" fill="rgb(222,22,37)" fg:x="5516" fg:w="1"/><text x="99.9788%" y="495.50"></text></g><g><title>`0x7FF83245794E (1 samples, 0.02%)</title><rect x="99.7469%" y="437" width="0.0181%" height="15" fill="rgb(237,53,32)" fg:x="5517" fg:w="1"/><text x="99.9969%" y="447.50"></text></g><g><title>`0x7FF8324590BC (1 samples, 0.02%)</title><rect x="99.7469%" y="421" width="0.0181%" height="15" fill="rgb(233,25,53)" fg:x="5517" fg:w="1"/><text x="99.9969%" y="431.50"></text></g><g><title>`0x7FF83245CCA4 (1 samples, 0.02%)</title><rect x="99.7469%" y="405" width="0.0181%" height="15" fill="rgb(210,40,34)" fg:x="5517" fg:w="1"/><text x="99.9969%" y="415.50"></text></g><g><title>`0x7FF83245D0D1 (1 samples, 0.02%)</title><rect x="99.7469%" y="389" width="0.0181%" height="15" fill="rgb(241,220,44)" fg:x="5517" fg:w="1"/><text x="99.9969%" y="399.50"></text></g><g><title>`0x7FF832492002 (1 samples, 0.02%)</title><rect x="99.7469%" y="373" width="0.0181%" height="15" fill="rgb(235,28,35)" fg:x="5517" fg:w="1"/><text x="99.9969%" y="383.50"></text></g><g><title>`0x7FF8324933DF (1 samples, 0.02%)</title><rect x="99.7469%" y="357" width="0.0181%" height="15" fill="rgb(210,56,17)" fg:x="5517" fg:w="1"/><text x="99.9969%" y="367.50"></text></g><g><title>`0x7FF832493D54 (1 samples, 0.02%)</title><rect x="99.7469%" y="341" width="0.0181%" height="15" fill="rgb(224,130,29)" fg:x="5517" fg:w="1"/><text x="99.9969%" y="351.50"></text></g><g><title>`0x7FF83249388A (1 samples, 0.02%)</title><rect x="99.7469%" y="325" width="0.0181%" height="15" fill="rgb(235,212,8)" fg:x="5517" fg:w="1"/><text x="99.9969%" y="335.50"></text></g><g><title>`0x7FF83247D939 (1 samples, 0.02%)</title><rect x="99.7650%" y="421" width="0.0181%" height="15" fill="rgb(223,33,50)" fg:x="5518" fg:w="1"/><text x="100.0150%" y="431.50"></text></g><g><title>`0x7FF832456382 (3 samples, 0.05%)</title><rect x="99.7469%" y="501" width="0.0542%" height="15" fill="rgb(219,149,13)" fg:x="5517" fg:w="3"/><text x="99.9969%" y="511.50"></text></g><g><title>`0x7FF83245AD95 (3 samples, 0.05%)</title><rect x="99.7469%" y="485" width="0.0542%" height="15" fill="rgb(250,156,29)" fg:x="5517" fg:w="3"/><text x="99.9969%" y="495.50"></text></g><g><title>`0x7FF8324449F1 (3 samples, 0.05%)</title><rect x="99.7469%" y="469" width="0.0542%" height="15" fill="rgb(216,193,19)" fg:x="5517" fg:w="3"/><text x="99.9969%" y="479.50"></text></g><g><title>`0x7FF832444F98 (3 samples, 0.05%)</title><rect x="99.7469%" y="453" width="0.0542%" height="15" fill="rgb(216,135,14)" fg:x="5517" fg:w="3"/><text x="99.9969%" y="463.50"></text></g><g><title>`0x7FF832457AC2 (2 samples, 0.04%)</title><rect x="99.7650%" y="437" width="0.0362%" height="15" fill="rgb(241,47,5)" fg:x="5518" fg:w="2"/><text x="100.0150%" y="447.50"></text></g><g><title>`0x7FF83247E146 (1 samples, 0.02%)</title><rect x="99.7830%" y="421" width="0.0181%" height="15" fill="rgb(233,42,35)" fg:x="5519" fg:w="1"/><text x="100.0330%" y="431.50"></text></g><g><title>`0x7FF83248B593 (1 samples, 0.02%)</title><rect x="99.7830%" y="405" width="0.0181%" height="15" fill="rgb(231,13,6)" fg:x="5519" fg:w="1"/><text x="100.0330%" y="415.50"></text></g><g><title>`0x7FF8325A25F4 (1 samples, 0.02%)</title><rect x="99.7830%" y="389" width="0.0181%" height="15" fill="rgb(207,181,40)" fg:x="5519" fg:w="1"/><text x="100.0330%" y="399.50"></text></g><g><title>`0x7FF82FADD03D (1 samples, 0.02%)</title><rect x="99.8011%" y="389" width="0.0181%" height="15" fill="rgb(254,173,49)" fg:x="5520" fg:w="1"/><text x="100.0511%" y="399.50"></text></g><g><title>`0x7FF82FA4EAF6 (1 samples, 0.02%)</title><rect x="99.8011%" y="373" width="0.0181%" height="15" fill="rgb(221,1,38)" fg:x="5520" fg:w="1"/><text x="100.0511%" y="383.50"></text></g><g><title>`0x7FF82FA4D778 (1 samples, 0.02%)</title><rect x="99.8011%" y="357" width="0.0181%" height="15" fill="rgb(206,124,46)" fg:x="5520" fg:w="1"/><text x="100.0511%" y="367.50"></text></g><g><title>`0x7FF82FA4D635 (1 samples, 0.02%)</title><rect x="99.8011%" y="341" width="0.0181%" height="15" fill="rgb(249,21,11)" fg:x="5520" fg:w="1"/><text x="100.0511%" y="351.50"></text></g><g><title>`0x7FF82FA4D07E (1 samples, 0.02%)</title><rect x="99.8011%" y="325" width="0.0181%" height="15" fill="rgb(222,201,40)" fg:x="5520" fg:w="1"/><text x="100.0511%" y="335.50"></text></g><g><title>`0x7FF8325A3C24 (1 samples, 0.02%)</title><rect x="99.8011%" y="309" width="0.0181%" height="15" fill="rgb(235,61,29)" fg:x="5520" fg:w="1"/><text x="100.0511%" y="319.50"></text></g><g><title>`0x7FF82FADD0EF (1 samples, 0.02%)</title><rect x="99.8192%" y="389" width="0.0181%" height="15" fill="rgb(219,207,3)" fg:x="5521" fg:w="1"/><text x="100.0692%" y="399.50"></text></g><g><title>`0x7FF82FAAC7ED (1 samples, 0.02%)</title><rect x="99.8192%" y="373" width="0.0181%" height="15" fill="rgb(222,56,46)" fg:x="5521" fg:w="1"/><text x="100.0692%" y="383.50"></text></g><g><title>`0x7FF82FAAC1C0 (1 samples, 0.02%)</title><rect x="99.8192%" y="357" width="0.0181%" height="15" fill="rgb(239,76,54)" fg:x="5521" fg:w="1"/><text x="100.0692%" y="367.50"></text></g><g><title>`0x7FF82FAAD8E3 (1 samples, 0.02%)</title><rect x="99.8192%" y="341" width="0.0181%" height="15" fill="rgb(231,124,27)" fg:x="5521" fg:w="1"/><text x="100.0692%" y="351.50"></text></g><g><title>`0x7FF82FAAD9B3 (1 samples, 0.02%)</title><rect x="99.8192%" y="325" width="0.0181%" height="15" fill="rgb(249,195,6)" fg:x="5521" fg:w="1"/><text x="100.0692%" y="335.50"></text></g><g><title>`0x7FF82FAAF3DD (1 samples, 0.02%)</title><rect x="99.8192%" y="309" width="0.0181%" height="15" fill="rgb(237,174,47)" fg:x="5521" fg:w="1"/><text x="100.0692%" y="319.50"></text></g><g><title>`0x7FF82FAB1429 (1 samples, 0.02%)</title><rect x="99.8192%" y="293" width="0.0181%" height="15" fill="rgb(206,201,31)" fg:x="5521" fg:w="1"/><text x="100.0692%" y="303.50"></text></g><g><title>`0x7FF8325A42A4 (1 samples, 0.02%)</title><rect x="99.8192%" y="277" width="0.0181%" height="15" fill="rgb(231,57,52)" fg:x="5521" fg:w="1"/><text x="100.0692%" y="287.50"></text></g><g><title>`0x7FF8324D8B04 (7 samples, 0.13%)</title><rect x="99.7288%" y="549" width="0.1266%" height="15" fill="rgb(248,177,22)" fg:x="5516" fg:w="7"/><text x="99.9788%" y="559.50"></text></g><g><title>`0x7FF83247FA20 (7 samples, 0.13%)</title><rect x="99.7288%" y="533" width="0.1266%" height="15" fill="rgb(215,211,37)" fg:x="5516" fg:w="7"/><text x="99.9788%" y="543.50"></text></g><g><title>`0x7FF832456020 (6 samples, 0.11%)</title><rect x="99.7469%" y="517" width="0.1085%" height="15" fill="rgb(241,128,51)" fg:x="5517" fg:w="6"/><text x="99.9969%" y="527.50"></text></g><g><title>`0x7FF832456414 (3 samples, 0.05%)</title><rect x="99.8011%" y="501" width="0.0542%" height="15" fill="rgb(227,165,31)" fg:x="5520" fg:w="3"/><text x="100.0511%" y="511.50"></text></g><g><title>`0x7FF8324D6203 (3 samples, 0.05%)</title><rect x="99.8011%" y="485" width="0.0542%" height="15" fill="rgb(228,167,24)" fg:x="5520" fg:w="3"/><text x="100.0511%" y="495.50"></text></g><g><title>`0x7FF8324D7716 (3 samples, 0.05%)</title><rect x="99.8011%" y="469" width="0.0542%" height="15" fill="rgb(228,143,12)" fg:x="5520" fg:w="3"/><text x="100.0511%" y="479.50"></text></g><g><title>`0x7FF8324D76EA (3 samples, 0.05%)</title><rect x="99.8011%" y="453" width="0.0542%" height="15" fill="rgb(249,149,8)" fg:x="5520" fg:w="3"/><text x="100.0511%" y="463.50"></text></g><g><title>`0x7FF8324497AC (3 samples, 0.05%)</title><rect x="99.8011%" y="437" width="0.0542%" height="15" fill="rgb(243,35,44)" fg:x="5520" fg:w="3"/><text x="100.0511%" y="447.50"></text></g><g><title>`0x7FF83244BCAE (3 samples, 0.05%)</title><rect x="99.8011%" y="421" width="0.0542%" height="15" fill="rgb(246,89,9)" fg:x="5520" fg:w="3"/><text x="100.0511%" y="431.50"></text></g><g><title>`0x7FF83259F89E (3 samples, 0.05%)</title><rect x="99.8011%" y="405" width="0.0542%" height="15" fill="rgb(233,213,13)" fg:x="5520" fg:w="3"/><text x="100.0511%" y="415.50"></text></g><g><title>`0x7FF82FADD126 (1 samples, 0.02%)</title><rect x="99.8373%" y="389" width="0.0181%" height="15" fill="rgb(233,141,41)" fg:x="5522" fg:w="1"/><text x="100.0873%" y="399.50"></text></g><g><title>`0x7FF82FAAC310 (1 samples, 0.02%)</title><rect x="99.8373%" y="373" width="0.0181%" height="15" fill="rgb(239,167,4)" fg:x="5522" fg:w="1"/><text x="100.0873%" y="383.50"></text></g><g><title>`0x7FF83249F3CC (1 samples, 0.02%)</title><rect x="99.8373%" y="357" width="0.0181%" height="15" fill="rgb(209,217,16)" fg:x="5522" fg:w="1"/><text x="100.0873%" y="367.50"></text></g><g><title>`0x7FF83249F7A2 (1 samples, 0.02%)</title><rect x="99.8373%" y="341" width="0.0181%" height="15" fill="rgb(219,88,35)" fg:x="5522" fg:w="1"/><text x="100.0873%" y="351.50"></text></g><g><title>`0x7FF8325A56A4 (1 samples, 0.02%)</title><rect x="99.8373%" y="325" width="0.0181%" height="15" fill="rgb(220,193,23)" fg:x="5522" fg:w="1"/><text x="100.0873%" y="335.50"></text></g><g><title>`0x7FF8324FD6A5 (8 samples, 0.14%)</title><rect x="99.7288%" y="565" width="0.1446%" height="15" fill="rgb(230,90,52)" fg:x="5516" fg:w="8"/><text x="99.9788%" y="575.50"></text></g><g><title>`0x7FF8324D8B79 (1 samples, 0.02%)</title><rect x="99.8554%" y="549" width="0.0181%" height="15" fill="rgb(252,106,19)" fg:x="5523" fg:w="1"/><text x="100.1054%" y="559.50"></text></g><g><title>`0x7FF8324477A0 (1 samples, 0.02%)</title><rect x="99.8554%" y="533" width="0.0181%" height="15" fill="rgb(206,74,20)" fg:x="5523" fg:w="1"/><text x="100.1054%" y="543.50"></text></g><g><title>`0x7FF83248B77B (1 samples, 0.02%)</title><rect x="99.8554%" y="517" width="0.0181%" height="15" fill="rgb(230,138,44)" fg:x="5523" fg:w="1"/><text x="100.1054%" y="527.50"></text></g><g><title>`0x7FF83248B94D (1 samples, 0.02%)</title><rect x="99.8554%" y="501" width="0.0181%" height="15" fill="rgb(235,182,43)" fg:x="5523" fg:w="1"/><text x="100.1054%" y="511.50"></text></g><g><title>`0x7FF83248D98C (1 samples, 0.02%)</title><rect x="99.8554%" y="485" width="0.0181%" height="15" fill="rgb(242,16,51)" fg:x="5523" fg:w="1"/><text x="100.1054%" y="495.50"></text></g><g><title>`0x7FF83247E7C1 (1 samples, 0.02%)</title><rect x="99.8554%" y="469" width="0.0181%" height="15" fill="rgb(248,9,4)" fg:x="5523" fg:w="1"/><text x="100.1054%" y="479.50"></text></g><g><title>`0x7FF832457663 (1 samples, 0.02%)</title><rect x="99.8734%" y="549" width="0.0181%" height="15" fill="rgb(210,31,22)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="559.50"></text></g><g><title>`0x7FF8324DCF03 (1 samples, 0.02%)</title><rect x="99.8734%" y="533" width="0.0181%" height="15" fill="rgb(239,54,39)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="543.50"></text></g><g><title>`0x7FF831A25B2F (1 samples, 0.02%)</title><rect x="99.8734%" y="517" width="0.0181%" height="15" fill="rgb(230,99,41)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="527.50"></text></g><g><title>`0x7FF831A25C1B (1 samples, 0.02%)</title><rect x="99.8734%" y="501" width="0.0181%" height="15" fill="rgb(253,106,12)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="511.50"></text></g><g><title>`0x7FF82FAD27C1 (1 samples, 0.02%)</title><rect x="99.8734%" y="485" width="0.0181%" height="15" fill="rgb(213,46,41)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="495.50"></text></g><g><title>`0x7FF8324DD0E5 (1 samples, 0.02%)</title><rect x="99.8734%" y="469" width="0.0181%" height="15" fill="rgb(215,133,35)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="479.50"></text></g><g><title>`0x7FF831A38649 (1 samples, 0.02%)</title><rect x="99.8734%" y="453" width="0.0181%" height="15" fill="rgb(213,28,5)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="463.50"></text></g><g><title>`0x7FF831A38778 (1 samples, 0.02%)</title><rect x="99.8734%" y="437" width="0.0181%" height="15" fill="rgb(215,77,49)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="447.50"></text></g><g><title>`0x7FF831A61B87 (1 samples, 0.02%)</title><rect x="99.8734%" y="421" width="0.0181%" height="15" fill="rgb(248,100,22)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="431.50"></text></g><g><title>`0x7FF831A619D4 (1 samples, 0.02%)</title><rect x="99.8734%" y="405" width="0.0181%" height="15" fill="rgb(208,67,9)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="415.50"></text></g><g><title>`0x7FF831A34ACD (1 samples, 0.02%)</title><rect x="99.8734%" y="389" width="0.0181%" height="15" fill="rgb(219,133,21)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="399.50"></text></g><g><title>`0x7FF831A528DB (1 samples, 0.02%)</title><rect x="99.8734%" y="373" width="0.0181%" height="15" fill="rgb(246,46,29)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="383.50"></text></g><g><title>`0x7FF831A529B4 (1 samples, 0.02%)</title><rect x="99.8734%" y="357" width="0.0181%" height="15" fill="rgb(246,185,52)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="367.50"></text></g><g><title>`0x7FF832529B12 (1 samples, 0.02%)</title><rect x="99.8734%" y="341" width="0.0181%" height="15" fill="rgb(252,136,11)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="351.50"></text></g><g><title>`0x7FF83255C881 (1 samples, 0.02%)</title><rect x="99.8734%" y="325" width="0.0181%" height="15" fill="rgb(219,138,53)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="335.50"></text></g><g><title>`0x7FF8325B1759 (1 samples, 0.02%)</title><rect x="99.8734%" y="309" width="0.0181%" height="15" fill="rgb(211,51,23)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="319.50"></text></g><g><title>`0x7FF832538567 (1 samples, 0.02%)</title><rect x="99.8734%" y="293" width="0.0181%" height="15" fill="rgb(247,221,28)" fg:x="5524" fg:w="1"/><text x="100.1234%" y="303.50"></text></g><g><title>`0x7FF8324FD7AF (2 samples, 0.04%)</title><rect x="99.8734%" y="565" width="0.0362%" height="15" fill="rgb(251,222,45)" fg:x="5524" fg:w="2"/><text x="100.1234%" y="575.50"></text></g><g><title>`0x7FF83245794E (1 samples, 0.02%)</title><rect x="99.8915%" y="549" width="0.0181%" height="15" fill="rgb(217,162,53)" fg:x="5525" fg:w="1"/><text x="100.1415%" y="559.50"></text></g><g><title>`0x7FF83245977E (1 samples, 0.02%)</title><rect x="99.8915%" y="533" width="0.0181%" height="15" fill="rgb(229,93,14)" fg:x="5525" fg:w="1"/><text x="100.1415%" y="543.50"></text></g><g><title>`0x7FF8324449F1 (1 samples, 0.02%)</title><rect x="99.8915%" y="517" width="0.0181%" height="15" fill="rgb(209,67,49)" fg:x="5525" fg:w="1"/><text x="100.1415%" y="527.50"></text></g><g><title>`0x7FF832444F98 (1 samples, 0.02%)</title><rect x="99.8915%" y="501" width="0.0181%" height="15" fill="rgb(213,87,29)" fg:x="5525" fg:w="1"/><text x="100.1415%" y="511.50"></text></g><g><title>`0x7FF832457AF7 (1 samples, 0.02%)</title><rect x="99.8915%" y="485" width="0.0181%" height="15" fill="rgb(205,151,52)" fg:x="5525" fg:w="1"/><text x="100.1415%" y="495.50"></text></g><g><title>`0x7FF8324AED72 (1 samples, 0.02%)</title><rect x="99.8915%" y="469" width="0.0181%" height="15" fill="rgb(253,215,39)" fg:x="5525" fg:w="1"/><text x="100.1415%" y="479.50"></text></g><g><title>`0x7FF83247C6B1 (1 samples, 0.02%)</title><rect x="99.8915%" y="453" width="0.0181%" height="15" fill="rgb(221,220,41)" fg:x="5525" fg:w="1"/><text x="100.1415%" y="463.50"></text></g><g><title>`0x7FF8325A4BA4 (1 samples, 0.02%)</title><rect x="99.8915%" y="437" width="0.0181%" height="15" fill="rgb(218,133,21)" fg:x="5525" fg:w="1"/><text x="100.1415%" y="447.50"></text></g><g><title>`0x7FF8324FD7B7 (1 samples, 0.02%)</title><rect x="99.9096%" y="565" width="0.0181%" height="15" fill="rgb(221,193,43)" fg:x="5526" fg:w="1"/><text x="100.1596%" y="575.50"></text></g><g><title>`0x7FF8324CCF87 (1 samples, 0.02%)</title><rect x="99.9096%" y="549" width="0.0181%" height="15" fill="rgb(240,128,52)" fg:x="5526" fg:w="1"/><text x="100.1596%" y="559.50"></text></g><g><title>`0x7FF8324B4281 (1 samples, 0.02%)</title><rect x="99.9096%" y="533" width="0.0181%" height="15" fill="rgb(253,114,12)" fg:x="5526" fg:w="1"/><text x="100.1596%" y="543.50"></text></g><g><title>`0x7FF83247D939 (1 samples, 0.02%)</title><rect x="99.9096%" y="517" width="0.0181%" height="15" fill="rgb(215,223,47)" fg:x="5526" fg:w="1"/><text x="100.1596%" y="527.50"></text></g><g><title>`0x7FF8324D76EA (1 samples, 0.02%)</title><rect x="99.9277%" y="533" width="0.0181%" height="15" fill="rgb(248,225,23)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="543.50"></text></g><g><title>`0x7FF8324497AC (1 samples, 0.02%)</title><rect x="99.9277%" y="517" width="0.0181%" height="15" fill="rgb(250,108,0)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="527.50"></text></g><g><title>`0x7FF83244BCAE (1 samples, 0.02%)</title><rect x="99.9277%" y="501" width="0.0181%" height="15" fill="rgb(228,208,7)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="511.50"></text></g><g><title>`0x7FF83259F89E (1 samples, 0.02%)</title><rect x="99.9277%" y="485" width="0.0181%" height="15" fill="rgb(244,45,10)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="495.50"></text></g><g><title>`0x7FF8300F07BD (1 samples, 0.02%)</title><rect x="99.9277%" y="469" width="0.0181%" height="15" fill="rgb(207,125,25)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="479.50"></text></g><g><title>`0x7FF8300F09E1 (1 samples, 0.02%)</title><rect x="99.9277%" y="453" width="0.0181%" height="15" fill="rgb(210,195,18)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="463.50"></text></g><g><title>`0x7FF83249F222 (1 samples, 0.02%)</title><rect x="99.9277%" y="437" width="0.0181%" height="15" fill="rgb(249,80,12)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="447.50"></text></g><g><title>`0x7FF83249FCD1 (1 samples, 0.02%)</title><rect x="99.9277%" y="421" width="0.0181%" height="15" fill="rgb(221,65,9)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="431.50"></text></g><g><title>`0x7FF8324A0B82 (1 samples, 0.02%)</title><rect x="99.9277%" y="405" width="0.0181%" height="15" fill="rgb(235,49,36)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="415.50"></text></g><g><title>`0x7FF8325A56A4 (1 samples, 0.02%)</title><rect x="99.9277%" y="389" width="0.0181%" height="15" fill="rgb(225,32,20)" fg:x="5527" fg:w="1"/><text x="100.1777%" y="399.50"></text></g><g><title>`0x7FF82F5D8D09 (1 samples, 0.02%)</title><rect x="99.9458%" y="421" width="0.0181%" height="15" fill="rgb(215,141,46)" fg:x="5528" fg:w="1"/><text x="100.1958%" y="431.50"></text></g><g><title>`0x7FF82F5D9870 (1 samples, 0.02%)</title><rect x="99.9458%" y="405" width="0.0181%" height="15" fill="rgb(250,160,47)" fg:x="5528" fg:w="1"/><text x="100.1958%" y="415.50"></text></g><g><title>`0x7FF82F5D971F (1 samples, 0.02%)</title><rect x="99.9458%" y="389" width="0.0181%" height="15" fill="rgb(216,222,40)" fg:x="5528" fg:w="1"/><text x="100.1958%" y="399.50"></text></g><g><title>`0x7FF82FAF49E0 (1 samples, 0.02%)</title><rect x="99.9458%" y="373" width="0.0181%" height="15" fill="rgb(234,217,39)" fg:x="5528" fg:w="1"/><text x="100.1958%" y="383.50"></text></g><g><title>`0x7FF8325A7340 (1 samples, 0.02%)</title><rect x="99.9458%" y="357" width="0.0181%" height="15" fill="rgb(207,178,40)" fg:x="5528" fg:w="1"/><text x="100.1958%" y="367.50"></text></g><g><title>`0x7FF8324FB83A (18 samples, 0.33%)</title><rect x="99.6565%" y="597" width="0.3254%" height="15" fill="rgb(221,136,13)" fg:x="5512" fg:w="18"/><text x="99.9065%" y="607.50"></text></g><g><title>`0x7FF8324FBA50 (18 samples, 0.33%)</title><rect x="99.6565%" y="581" width="0.3254%" height="15" fill="rgb(249,199,10)" fg:x="5512" fg:w="18"/><text x="99.9065%" y="591.50"></text></g><g><title>`0x7FF8324FD8C6 (3 samples, 0.05%)</title><rect x="99.9277%" y="565" width="0.0542%" height="15" fill="rgb(249,222,13)" fg:x="5527" fg:w="3"/><text x="100.1777%" y="575.50"></text></g><g><title>`0x7FF8324D7716 (3 samples, 0.05%)</title><rect x="99.9277%" y="549" width="0.0542%" height="15" fill="rgb(244,185,38)" fg:x="5527" fg:w="3"/><text x="100.1777%" y="559.50"></text></g><g><title>`0x7FF8324D7716 (2 samples, 0.04%)</title><rect x="99.9458%" y="533" width="0.0362%" height="15" fill="rgb(236,202,9)" fg:x="5528" fg:w="2"/><text x="100.1958%" y="543.50"></text></g><g><title>`0x7FF8324D76EA (2 samples, 0.04%)</title><rect x="99.9458%" y="517" width="0.0362%" height="15" fill="rgb(250,229,37)" fg:x="5528" fg:w="2"/><text x="100.1958%" y="527.50"></text></g><g><title>`0x7FF8324497AC (2 samples, 0.04%)</title><rect x="99.9458%" y="501" width="0.0362%" height="15" fill="rgb(206,174,23)" fg:x="5528" fg:w="2"/><text x="100.1958%" y="511.50"></text></g><g><title>`0x7FF83244BCAE (2 samples, 0.04%)</title><rect x="99.9458%" y="485" width="0.0362%" height="15" fill="rgb(211,33,43)" fg:x="5528" fg:w="2"/><text x="100.1958%" y="495.50"></text></g><g><title>`0x7FF83259F89E (2 samples, 0.04%)</title><rect x="99.9458%" y="469" width="0.0362%" height="15" fill="rgb(245,58,50)" fg:x="5528" fg:w="2"/><text x="100.1958%" y="479.50"></text></g><g><title>`0x7FF82F5E6E26 (2 samples, 0.04%)</title><rect x="99.9458%" y="453" width="0.0362%" height="15" fill="rgb(244,68,36)" fg:x="5528" fg:w="2"/><text x="100.1958%" y="463.50"></text></g><g><title>`0x7FF82F64AD56 (2 samples, 0.04%)</title><rect x="99.9458%" y="437" width="0.0362%" height="15" fill="rgb(232,229,15)" fg:x="5528" fg:w="2"/><text x="100.1958%" y="447.50"></text></g><g><title>`0x7FF82F64F359 (1 samples, 0.02%)</title><rect x="99.9638%" y="421" width="0.0181%" height="15" fill="rgb(254,30,23)" fg:x="5529" fg:w="1"/><text x="100.2138%" y="431.50"></text></g><g><title>`0x7FF82F64F415 (1 samples, 0.02%)</title><rect x="99.9638%" y="405" width="0.0181%" height="15" fill="rgb(235,160,14)" fg:x="5529" fg:w="1"/><text x="100.2138%" y="415.50"></text></g><g><title>`0x7FF831A2E0DB (1 samples, 0.02%)</title><rect x="99.9638%" y="389" width="0.0181%" height="15" fill="rgb(212,155,44)" fg:x="5529" fg:w="1"/><text x="100.2138%" y="399.50"></text></g><g><title>`0x7FF8324A9182 (1 samples, 0.02%)</title><rect x="99.9638%" y="373" width="0.0181%" height="15" fill="rgb(226,2,50)" fg:x="5529" fg:w="1"/><text x="100.2138%" y="383.50"></text></g><g><title>`0x7FF8324A9732 (1 samples, 0.02%)</title><rect x="99.9638%" y="357" width="0.0181%" height="15" fill="rgb(234,177,6)" fg:x="5529" fg:w="1"/><text x="100.2138%" y="367.50"></text></g><g><title>`0x7FF8325A47E4 (1 samples, 0.02%)</title><rect x="99.9638%" y="341" width="0.0181%" height="15" fill="rgb(217,24,9)" fg:x="5529" fg:w="1"/><text x="100.2138%" y="351.50"></text></g><g><title>all (5,531 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="5531"/><text x="0.2500%" y="639.50"></text></g><g><title>`0x7FF83252910E (19 samples, 0.34%)</title><rect x="99.6565%" y="613" width="0.3435%" height="15" fill="rgb(239,221,27)" fg:x="5512" fg:w="19"/><text x="99.9065%" y="623.50"></text></g><g><title>`0x7FF83252916E (1 samples, 0.02%)</title><rect x="99.9819%" y="597" width="0.0181%" height="15" fill="rgb(222,198,25)" fg:x="5530" fg:w="1"/><text x="100.2319%" y="607.50"></text></g><g><title>`0x7FF832529245 (1 samples, 0.02%)</title><rect x="99.9819%" y="581" width="0.0181%" height="15" fill="rgb(211,99,13)" fg:x="5530" fg:w="1"/><text x="100.2319%" y="591.50"></text></g><g><title>`0x7FF8325292AE (1 samples, 0.02%)</title><rect x="99.9819%" y="565" width="0.0181%" height="15" fill="rgb(232,111,31)" fg:x="5530" fg:w="1"/><text x="100.2319%" y="575.50"></text></g><g><title>`0x7FF832529324 (1 samples, 0.02%)</title><rect x="99.9819%" y="549" width="0.0181%" height="15" fill="rgb(245,82,37)" fg:x="5530" fg:w="1"/><text x="100.2319%" y="559.50"></text></g></svg></svg>